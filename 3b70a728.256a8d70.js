(window.webpackJsonp=window.webpackJsonp||[]).push([[423],{1942:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/custom_style-81053475c883f05457a37e9f8a2b967c.png"},1943:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/styling_header-32c3f48fd35fca9d80c3b2e6cccfe634.png"},1944:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/styling_footer-ba442bd8ed1b88219b2c8320490e0ba0.png"},1945:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/row_css-bf53f3a5aba98c98e0cad3f37df0dc74.png"},1946:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/cell_css-0dfc17b0fae0a3958547a9827617bb6a.png"},1947:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/mark_cell-cbfba18261981a672f6a46b00f9aad3c.png"},1948:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/min_max_mark-aed5fa2564c3c15404f53ad093d4a999.png"},1949:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/cell_templates-4574487052f949519767cd8d2a4d574e.png"},482:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return o}));var l=n(2),a=n(6),c=(n(0),n(1808)),s={sidebar_label:"Customization",title:"Customization"},r={unversionedId:"treegrid/customization",id:"treegrid/customization",isDocsHomePage:!1,title:"Customization",description:"Styling TreeGrid",source:"@site/docs/treegrid/customization.md",slug:"/treegrid/customization",permalink:"/treegrid/customization",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/treegrid/customization.md",version:"current",sidebar_label:"Customization",sidebar:"docs",previous:{title:"Work with Selection Object",permalink:"/treegrid/usage_selection"},next:{title:"Event Handling",permalink:"/treegrid/events"}},i=[{value:"Styling TreeGrid",id:"styling-treegrid",children:[]},{value:"Styling header cells",id:"styling-header-cells",children:[]},{value:"Styling footer cells",id:"styling-footer-cells",children:[]},{value:"Styling rows",id:"styling-rows",children:[]},{value:"Styling cells",id:"styling-cells",children:[]},{value:"Adding custom marks to cells",id:"adding-custom-marks-to-cells",children:[]},{value:"Adding template to cells",id:"adding-template-to-cells",children:[]}],b={rightToc:i};function o(e){var t=e.components,s=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(l.a)({},b,s,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"styling-treegrid"},"Styling TreeGrid"),Object(c.b)("p",null,"There is a possibility to make changes in the look and feel of a treegrid. "),Object(c.b)("p",null,Object(c.b)("img",{src:n(1942).default})),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://snippet.dhtmlx.com/cpvir0od"},"https://snippet.dhtmlx.com/cpvir0od"),"\tTreeGrid. Styling Grid"),Object(c.b)("p",null,"For this you need to take the following steps:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"add a new CSS class(es) with desired settings in the ","<","style",">"," section of your HTML page or in your file with styles (don't forget to include your file on the page in this case)")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"<style>\n    .my-first-class {\n        /*some styles*/\n    }\n    \n    .my-second-class {\n        /*some styles*/\n    }\n</style>\n")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"specify the name of the created CSS class (or names of classes separated by spaces) as the value of the ",Object(c.b)("a",{parentName:"li",href:"/treegrid/api/treegrid_css_config"},"css")," property in the TreeGrid configuration:")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'var treegrid = new dhx.TreeGrid("treegrid_container", { \n    css:"my-first-class my-second-class"\n});\n')),Object(c.b)("h2",{id:"styling-header-cells"},"Styling header cells"),Object(c.b)("p",null,Object(c.b)("img",{src:n(1943).default})),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://snippet.dhtmlx.com/vf0ws454"},"https://snippet.dhtmlx.com/vf0ws454"),"\tTreeGrid. Styling Header Cells"),Object(c.b)("p",null,"You can easily set some styling to the text of header cells by applying some inline style or a CSS class to the ",Object(c.b)("a",{parentName:"p",href:"/treegrid/configuration#columns"},"text")," property of the header of a column:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'var treegrid = new dhx.TreeGrid("treegrid_container", { \n    columns: [\n        { width: 280, id: "name", \n            header: [{ text: "<span style=\'font-size:2em\'>Book Name</span>" }] },\n        { width: 160, id: "price", type: "string", \n            header: [{ text: "<span className=\'title\'>Terms and conditions</span>",\n            colspan: 2 }, { text: "Price" }] },\n        { width: 160, id: "cover", type: "string", header: [{}, { text: "Cover" }] }\n    ],\n    data: dataset\n});\n')),Object(c.b)("h2",{id:"styling-footer-cells"},"Styling footer cells"),Object(c.b)("p",null,Object(c.b)("img",{src:n(1944).default})),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://snippet.dhtmlx.com/wi39d42e"},"https://snippet.dhtmlx.com/wi39d42e"),"\tTreeGrid. Styling Footer Cells"),Object(c.b)("p",null,"You can easily set some styling to the text of footer cells by applying some inline style or a CSS class to the ",Object(c.b)("a",{parentName:"p",href:"/treegrid/configuration#columns"},"text")," property of the footer of a column:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-html"},'<style>     \n    .custom_footer{\n        font-size: 18px;\n        text-decoration: underline;\n    }    \n</style>\n\nvar treegrid = new dhx.TreeGrid("treegrid_container", { \n    columns: [\n        {\n            width: 280, id: "name", header: [{ text: "Book Name" }],\n            footer: [\n                { text: \'<div className="custom_footer">Total</div>\' },\n                { text: \'<div className="custom_footer">Minimal value</div>\' }\n            ]\n        },\n        {\n            width: 160, id: "price", type: "string", \n            header: [{ text: "Terms and conditions", colspan: 2 }, { text: "Price" }],\n            footer: [{ content: "sum" }, { content: "min" }]\n        },\n        { \n            width: 160, id: "cover", type: "string", \n            header: [{}, { text: "Cover" }] \n        }\n    ],\n    data: dataset\n});\n')),Object(c.b)("h2",{id:"styling-rows"},"Styling rows"),Object(c.b)("p",null,"It is possible to change the appearance of treegrid rows by applying custom CSS styles to them. "),Object(c.b)("p",null,Object(c.b)("img",{src:n(1945).default})),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://snippet.dhtmlx.com/3ojyoryn"},"https://snippet.dhtmlx.com/3ojyoryn"),"\tTreeGrid. Custom Row Style"),Object(c.b)("p",null,"There are two ways to do it:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"via the ",Object(c.b)("strong",null,"rowCss")," property in the configuration of TreeGrid. As a value of property set a function that takes the id of a row as a parameter and returns a string with the name of a CSS class.")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-html"},"<style>\n.my_custom_row {\n    background: coral;\n}\n</style>\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'var treegrid = new dhx.TreeGrid("treegrid_container", { \n    columns: [// columns config],\n    rowCss: function (row) { return row.custom ? "my_custom_row" : "" }, /*!*/\n    data: dataset\n});\n')),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"with the help of the ",Object(c.b)("a",{parentName:"li",href:"/treegrid/api/treegrid_addrowcss_method"},"addRowCss()")," method:")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-html"},"<style>\n    .myCustomClass{\n        background:greenyellow;\n    }\n</style>\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'var rowId = treegrid.data.getId(1);\ntreegrid.addRowCss(rowId, "myCustomClass"); /*!*/\n')),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://snippet.dhtmlx.com/kort67nu"},"https://snippet.dhtmlx.com/kort67nu"),"\tTreeGrid. Add row css"),Object(c.b)("p",null,"where:"),Object(c.b)("table",{className:"webixdoc_links"},Object(c.b)("tbody",null,Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"rowId")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string|number"),") the id of a row")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"css")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string"),") the name of a CSS class")))),Object(c.b)("h2",{id:"styling-cells"},"Styling cells"),Object(c.b)("p",null,Object(c.b)("img",{src:n(1946).default})),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://snippet.dhtmlx.com/smjecfzp"},"https://snippet.dhtmlx.com/smjecfzp"),"\tTreeGrid. Add cell css"),Object(c.b)("p",null,"It is easy to style necessary cells using the ",Object(c.b)("a",{parentName:"p",href:"/treegrid/api/treegrid_addcellcss_method"},"addCellCss()")," method. It takes three parameters:"),Object(c.b)("table",{className:"webixdoc_links"},Object(c.b)("tbody",null,Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"row")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string|number"),") the id of a row")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"col")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string|number"),") the id of a column")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"css")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string"),") the name of the CSS class")))),Object(c.b)("br",null),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-html"},"<style>\n.myCustomClass{\n    background:greenyellow;\n}\n</style>\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'treegrid.addCellCss(rowId, "name", "myCustomClass");\n')),Object(c.b)("h2",{id:"adding-custom-marks-to-cells"},"Adding custom marks to cells"),Object(c.b)("p",null,Object(c.b)("img",{src:n(1947).default})),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://snippet.dhtmlx.com/14jkc5s3"},"https://snippet.dhtmlx.com/14jkc5s3"),"\tTreeGrid. Custom Mark Cells"),Object(c.b)("p",null,"You can mark particular cells in a treegrid using the ",Object(c.b)("strong",null,"mark")," property of a column configuration. You need to set its value as a function that takes the following parameters:"),Object(c.b)("table",{className:"webixdoc_links"},Object(c.b)("tbody",null,Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"cell")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string"),") the value of a cell")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"columnCells")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"array"),") an array of all cell values in the specified column")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"row")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"object"),") an object with all cells in a row")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"col")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"object"),") the config of a column (see the columns config)")))),Object(c.b)("p",null,"The function should return a string with a cusotm CSS class for your mark."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-html"},"<style>\n    .my_custom_mark {\n        background: lightcoral;\n    }\n    \n    .total_col {\n        background: #f2f2f2;\n    }\n</style>\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'var treegrid = new dhx.TreeGrid("treegrid_container", { \n    columns: [\n        { width: 280, id: "name", header: [{ text: "Book Name" }] },\n        {\n            width: 160, id: "price", type: "string", \n            header: [\n                { text: "Terms and conditions", colspan: 2 }, \n                { text: "Price" }\n            ],\n            // marks specified cells in a column\n            mark: function (cell, data, row, col) {  /*!*/\n                return cell > 10 ? "my_custom_mark" : ""  /*!*/\n            }\n        },\n        { width: 160, id: "cover", type: "string", \n            header: [{}, { text: "Cover" }] },\n        { width: 160, id: "ships", type: "string", \n            header: [{ text: "Ships in" }],\n            // marks all cells in a column\n            mark: function (cell, data) { return "total_col"; } /*!*/\n        },\n        // more options         \n    ],\n    data: dataset\n});\n')),Object(c.b)("p",null,"It is also possible to highlight cells with minimum and (or) maximum values in a grid using the ",Object(c.b)("strong",null,"mark")," property of a column configuration. The property is an object which takes two optional parameters:"),Object(c.b)("table",{className:"webixdoc_links"},Object(c.b)("tbody",null,Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"min")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string"),") a custom CSS class to mark a cell that contains the minimum value")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"max")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string"),") a custom CSS class to mark a cell that contains the maximum value")))),Object(c.b)("br",null),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-html"},"<style>\n    .max_cell {\n        background: #f44336;\n        color: #FFF;\n    }\n\n    .min_cell {\n        background: #4CAF50;\n        color: #FFF\n    }\n</style>\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'var grid = new dhx.Grid("grid", {\n    columns: [\n        { width: 280, id: "name", header: [{ text: "Book Name" }] },\n        {\n            width: 160, id: "price", type: "string", \n            header: [\n                { text: "Terms and conditions", colspan: 2 },\n                { text: "Price" }\n            ],\n            mark: { /*!*/\n                min: "min_cell", /*!*/\n                max: "max_cell" /*!*/\n            }\n        },\n        // more options\n    ],\n    data: dataset\n});\n')),Object(c.b)("p",null,Object(c.b)("img",{src:n(1948).default})),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://snippet.dhtmlx.com/um9mjrs5"},"https://snippet.dhtmlx.com/um9mjrs5"),"\tTreeGrid. Mark Cells"),Object(c.b)("h2",{id:"adding-template-to-cells"},"Adding template to cells"),Object(c.b)("p",null,Object(c.b)("img",{src:n(1949).default})),Object(c.b)("p",null,"It is possible to customize the content of cells of TreeGrid via the ",Object(c.b)("strong",null,"template")," property of a ",Object(c.b)("a",{parentName:"p",href:"/treegrid/configuration#columns"},"column configuration"),". The template option is a function that takes three parameters:"),Object(c.b)("table",{className:"webixdoc_links"},Object(c.b)("tbody",null,Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"cellValue")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"any"),") the value of a cell")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"row")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"object"),") an object with all cells in a row")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"col")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"object"),") the config of a column")))),Object(c.b)("br",null),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'var treeGrid = new dhx.TreeGrid("treegrid", {\n    columns: [\n        { width: 280, id: "name", header: [{ text: "Book Name" }] },\n        { width: 160, id: "price", type: "string",\n            header: [\n                 { text: "Terms and conditions", colspan: 2 },\n                  { text: "Price" }\n            ],\n            template: function (text, row, col) { /*!*/\n                return text?"$ "+text :""; /*!*/\n            }\n        },\n        // more options \n    ],\n    data: dataset,\n});\n')),Object(c.b)("p",null,Object(c.b)("a",{parentName:"p",href:"https://snippet.dhtmlx.com/q76qcgn3"},"https://snippet.dhtmlx.com/q76qcgn3"),"\tTreeGrid. Template with content for cells"),Object(c.b)("h3",{id:"eventhandling"},"Event handlers for the template"),Object(c.b)("p",null,"Starting from v7.0, you can assign event handlers to HTML elements of a custom template of TreeGrid cells via using the treegrid/api/treegrid_eventhandlers_config.md configuration property of TreeGrid, for instance:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'const treeGrid = new dhx.TreeGrid("treegrid", {\n    columns: [\n        { width: 280, id: "name", header: [{ text: "Book Name" }] },\n        {\n            width: 160, id: "price", type: "string", \n            header: [{ text: "Terms and conditions", colspan: 2 }, { text: "Price" }],\n            htmlEnable: true,\n            template: function (text, row, col) { /*!*/\n                return text ? "<div className=\'cell__template\'>$ " + text + "</div>" : ""; /*!*/\n            } /*!*/\n        },\n        // more options\n    ],\n    data: data,\n    eventHandlers: { /*!*/\n        onmouseover: { /*!*/\n            cell__template: function(event, data) { /*!*/\n                display(JSON.stringify(data.row, null, 2)); /*!*/\n            } /*!*/\n        } /*!*/\n    } /*!*/\n});\n\n')),Object(c.b)("p",null,"{{sample treegrid/02_configuration/22_template_events.html}}"),Object(c.b)("p",null,"The ",Object(c.b)("strong",null,"eventHandlers")," object includes a set of ",Object(c.b)("em",{parentName:"p"},"key:value")," pairs, where:"),Object(c.b)("table",{className:"webixdoc_links"},Object(c.b)("tbody",null,Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("i",null,"key")),Object(c.b)("td",null," the name of the event. Note, that at the beginning of the event name the ",Object(c.b)("b",null,"'on'")," prefix is used (onclick, onmouseover).")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("i",null,"value")),Object(c.b)("td",null,"an object that contains a ",Object(c.b)("i",null,"key:value")," pair, where ",Object(c.b)("i",null,"key")," is the css class name that the handler will be applied to and ",Object(c.b)("i",null,"value")," is a function that takes two parameters:",Object(c.b)("ul",null,Object(c.b)("li",null,Object(c.b)("b",null,"event")," - an event object"),Object(c.b)("li",null,Object(c.b)("b",null,"object")," - an object with two attributes:",Object(c.b)("ol",null,"- ",Object(c.b)("b",null,"row")," - an object with a row configuration"),Object(c.b)("ol",null,"- ",Object(c.b)("b",null,"column")," - an object with a column configuration"))))))))}o.isMDXComponent=!0}}]);