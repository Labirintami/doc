(window.webpackJsonp=window.webpackJsonp||[]).push([[1619],{1678:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(2),r=a(6),o=(a(0),a(1808)),c={sidebar_label:"How to Start",title:"How to Start"},i={unversionedId:"chart/chart_initialization",id:"chart/chart_initialization",isDocsHomePage:!1,title:"How to Start",description:"`tododelete`",source:"@site/docs/chart/chart_initialization.md",slug:"/chart/chart_initialization",permalink:"/chart/chart_initialization",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/chart/chart_initialization.md",version:"current",sidebar_label:"How to Start"},l=[{value:"Include source files from CDN",id:"include-source-files-from-cdn",children:[]}],s={rightToc:l};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"tododelete")," "),Object(o.b)("p",null,"To initialize a chart object in an application, you need to take the following steps:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Include related JS and CSS files"),Object(o.b)("li",{parentName:"ol"},"Place a chart container on a page"),Object(o.b)("li",{parentName:"ol"},"Define data for a chart"),Object(o.b)("li",{parentName:"ol"},"Create an object constructor to initialize")),Object(o.b)("p",null,"##Step 1. Include source files"),Object(o.b)("p",null,"To start working with dhtmlxChart, you need to include JS and CSS files on a page. There are two of them:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-html"},'<head>\n    <script src="codebase/chart.js"><\/script>\n    <link rel="stylesheet" type="text/css" href="codebase/chart.css">   \n</head>\n')),Object(o.b)("h3",{id:"include-source-files-from-cdn"},"Include source files from CDN"),Object(o.b)("p",null,"##Step 2. Set Chart container"),Object(o.b)("p",null,"Your next step is to specify an HTML container for your future chart."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-html"},"<div id=\"chart_container\" style={{width: '1000px', height: '500px'}}></div>\n")),Object(o.b)("p",null,"##Step 3. Specify data"),Object(o.b)("p",null,"Then you need to define data that will be presented in a chart. dhtmlxChart allows loading data in ",Object(o.b)("a",{parentName:"p",href:"/chart/loading#json"},"JSON"),", ",Object(o.b)("a",{parentName:"p",href:"/chart/loading#xml"},"XML"),", ",Object(o.b)("a",{parentName:"p",href:"/chart/loading#csv"},"CSV")," or\n",Object(o.b)("a",{parentName:"p",href:"/chart/loading#jsarray"},"JS Array")," format.\nTo load inline data, call the ",Object(o.b)("strong",null,"parse()")," method of the Data Collection object."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"var data = [\n     { month: '\\'02', 'company A': 20, 'company B': 52, 'company C': 72},\n     { month: '\\'03', 'company A': 55, 'company B': 33, 'company C': 90},\n     { month: '\\'04', 'company A': 40, 'company B': 30, 'company C': 81},\n     { month: '\\'05', 'company A': 80, 'company B': 11, 'company C': 62},\n     { month: '\\'06', 'company A': 60, 'company B': 14, 'company C': 68},\n     // more data items\n];\n")),Object(o.b)("p",null,"##Step 4. Create object constructor"),Object(o.b)("p",null,"After that, you should create an object constructor. The constructor function takes two parameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"container")," \u2013 (*id*) the id of an HTML container where chart will be initialized. You've defined it in the step 2"),Object(o.b)("li",{parentName:"ul"},"the chart configuration object with necessary properties. There are four main config options:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"type"),' - (*string*) the type of a chart to initialize. \u0421hoose any of the 6 available types: "area","bar","line","pie","radar","scatter".'),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"scales")," - (*hash*) an object with charts scales - ",Object(o.b)("strong",null,"series")," - (*array*) an array of series objects. Series are respresentations of data properties. - ",Object(o.b)("strong",null,"legend")," - (*array*) an array with the legend configuration options")))),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'var config = {\n    type: "area",\n    scales: {\n        "bottom":{\n            text: \'month\'\n        },\n        "left":{\n            padding: 10,\n            max: 90\n         }\n    },\n    series:[\n        {\n            value: \'company A\',\n            strokeWidth: 2,\n            // more options\n        }\n    ]\n}\n\nvar chart = new dhx.Chart("div1", config);\n')),Object(o.b)("p",null,"##Step 5. Load chart with data"),Object(o.b)("p",null,"Finally, you are to load the chart with data. To load inline data into the chart, use the ",Object(o.b)("strong",null,"parse()")," method of the Data Collection object:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"chart.data.parse(data);\n")),Object(o.b)("p",null," complete the article"))}b.isMDXComponent=!0}}]);