(window.webpackJsonp=window.webpackJsonp||[]).push([[1651],{1710:function(n,e,o){"use strict";o.r(e),o.d(e,"frontMatter",(function(){return s})),o.d(e,"metadata",(function(){return i})),o.d(e,"rightToc",(function(){return l})),o.d(e,"default",(function(){return g}));var t=o(2),r=o(6),a=(o(0),o(1808)),s={sidebar_label:"Grid API",title:"Grid API"},i={unversionedId:"grid/temp_api",id:"grid/temp_api",isDocsHomePage:!1,title:"Grid API",description:"`tododelete`",source:"@site/docs/grid/temp_api.md",slug:"/grid/temp_api",permalink:"/grid/temp_api",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/grid/temp_api.md",version:"current",sidebar_label:"Grid API"},l=[],c={rightToc:l};function g(n){var e=n.components,o=Object(r.a)(n,["components"]);return Object(a.b)("wrapper",Object(t.a)({},c,o,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"tododelete")," "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'\nConstructor\n----------------\n\n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [\n        { width: 100, id: "a", header: [{ text: "#" }] },\n        { width: 100, id: "b", header: [{ text: "Title" }] },\n        { width: 200, id: "c", header: [{ text: "Name" }] },\n        { width: 200, id: "d", header: [{ text: "Address" }] }\n    ],\n    headerRowHeight: 50,\n    data: dataset\n});\n~~~\n\nParameters:\n\n- the HTML container for dhtmlxGrid\n- optional, an object with configuration settings (check below)\n\nObjects\n----------\n\n- config\n- data\n- events\n- export\n\n\nMethods\n----------\n\n### addCellCss\n\n- short: adds a style to a cell\n- params:\n    - row   string,number       the id of a row\n    - col   string,number       the id of a column\n    - css   string              the name of the CSS class\n- example:\n~~~js\n<style>\n    .myCustomClass{\n        background:greenyellow;\n    }\n</style>\n\ngrid.addCellCss("1", "b", "myCustomClass");\n~~~\n\n\n### addRowCss\n\n- short: adds a style to a row\n- params:\n    - id    string,number       the id of a row\n    - css   string              the name of the CSS class\n- example:\n~~~js\n<style>\n    .myCustomClass{\n        background:greenyellow;\n    }\n</style>\n\ngrid.addRowCss("2", "myCustomClass");\n~~~\n\n\n### addSpan \n\n- short: adds a rows/cols span\n- params:\n    - span      object      an object with configuration of a span\n- example:\n~~~js\ngrid.addSpan({ \n    row: "0", \n    column: "a", \n    rowspan: 5 \n});\n// grid.paint();\n~~~\n- descr:\nThe <strong>span</strong> object contains the following properties:\n    - <strong>row</strong> - (*string|number*) mandatory, the id of a row\n    - <strong>column</strong> - (*string|number*) mandatory, the id of a column\n    - <strong>rowspan</strong> - (*number*) optional, the number of rows in a span\n    - <strong>colspan</strong> - (*number*) optional, the number of columns in a span\n    - <strong>text</strong> - (*string|number*) optional, the text in a spanned row/column\n    - <strong>css</strong> - (*string*) optional, the name of the CSS class that will be applied to a span\n- relatedapi: spans, getSpan, removeSpan\n\n### adjustColumnWidth   \n\n- short: adjusts the width of a column to make all its content visible\n- params:\n    - id    string,number       the id of a column\n- example:\n~~~js\ngrid.adjustColumnWidth("b");\n~~~\n\n### destructor\n\n- short: releases occupied resources\n- example:\n~~~js\ngrid.destructor();\n~~~\n\n### getCellRect\n\n- short: returns the parameters of a cell\n- params: \n    - row   string,number       the id of a row\n    - col   string,number       the id of a column\n- returns:\n    - rect  object      an object with parameters of a cell\n- example: \n\n~~~js\nvar rect = grid.getCellRect("1","c");\n// -> {x: 200, y: -40, height: 40, width: 200}\n~~~\n- descr:\nThe return object includes the following attributes:\n\n    - <strong>x</strong> - (*number*) the X coordinate of a cell\n    - <strong>y</strong> - (*number*) the Y coordinate of a cell\n    - <strong>height</strong> - (*number*) the height of a cell\n    - <strong>width</strong> - (*number*) the width of a cell\n\n### getColumn\n\n- short: returns an object with attributes of a column\n- params: \n    - colId     string,number       the id of a column\n- returns:\n    - config        object      an object with attributes of a column    \n- example:\n~~~js\nvar column = grid.getColumn("b"); // ->\n// {width: 100, id: "b", header: Array(1), $cellCss: {\u2026}, type: "string"}\n~~~\n- descr:\nThe returned object contains the following set of properties:\n- <strong>id</strong> - (*string|number*) the id of a column\n- <strong>width</strong> - (*number*) the width of a column\n- <strong>header</strong> - (*array*) an array of objects with header rows configuration. Each header object may include:\n    - <strong>text</strong> - (*string*|*number*) the text of a header\n    - <strong>colspan</strong> - (*number*) the number of columns in a colspan\n    - <strong>css</strong> - (*any*) styling to be applied to a header\n    - <strong>content</strong> -  (*string*) additional content of a header, which can be:\n        - a filter: "inputFilter" or "selectFilter"\n        - one of the methods that process values in a column and show result in the header: "avg" | "sum" | "max" | "min"\n        - some other string\n- <strong>footer</strong> - (*array*) an array of objects with footer rows configuration. Each footer object may include:\n    - <strong>text</strong> - (*string*|*number*) the text of a header\n    - <strong>colspan</strong> - (*number*) the number of columns in a colspan\n    - <strong>css</strong> - (*any*) styling to be applied to a header\n    - <strong>content</strong> -  (*string*) additional content of a header, which can be:\n        - a filter: "inputFilter" or "selectFilter"\n        - one of the methods that process values in a column and show result in the footer: "avg" | "sum" | "max" | "min"\n        - some other string\n- <strong>maxWidth</strong> - (*number*) the maximal width to be set for a column\n- <strong>mark</strong> - (*object|function*) returns a template for marking a cell(s)\n    - as an *object* contains <strong>min</strong> and <strong>max</strong> properties, to apply desired CSS classes to cells with minimal|maximal values in a column \n    - as a *function* takes several parameters:\n        - <strong>cell</strong> - (*string*) the value of a cell\n        - <strong>columnCells</strong> - (*array*) an array of all cell values in the specified column\n        - <strong>row</strong> - (*object*) an object with all cells in a row\n        - <strong>col</strong> - (*object*) the config of a column (see the <strong>columns</strong> config)      \n- <strong>type</strong> - (*string*) the type of a column: "string"|"number"|"boolean"|"any"\n- <strong>template</strong> - (*function*) returns a template with content for a cell(s). Takes 3 parameters:\n    - <strong>cellValue</strong> - (*any*) the value of a cell\n    - <strong>row</strong> - (*object*) an object with all cells in a row\n    - <strong>col</strong> - (*object*) the config of a column (see the <strong>columns</strong> config)          \n- <strong>$cellCss</strong> - (*array*) <strong>readonly</strong>, an array of objects with CSS classes (as key:value pairs) for each cell of a column\n- <strong>$uniqueData</strong> - (*array*) <strong>readonly</strong>, an array that contains some unique data, can\'t be redefined\n\n\n### getScrollState\n\n- short: returns the coordinates of a position a grid has been scrolled to\n- returns: \n    -  position     object      an object with x,y coordinates of a position the grid has been scrolled to\n- example:\n~~~js\nvar state = grid.getScrollState(); // -> {x:0,y:0}\n~~~\n\n\n### getSpan\n\n- short: returns an object with spans \n- params:\n    - row - (*string|number*) the id of a row\n    - col - (*string|number*) the id of a column\n- returns:\n    - span - (*object*) an object with configuration of a span\n- example:\n~~~js\nvar span = grid.getSpan("10","a"); \n// -> {row:"10", column:"a", colspan:4, text:"Some header", css:"myCustomColspan"}\n~~~\n- descr:\nA returned <strong>span</strong> object contains the following properties:\n    - <strong>row</strong> - (*string|number*) obligatory, the id of a row\n    - <strong>column</strong> - (*string|number*) obligatory, the id of a column\n    - <strong>rowspan</strong> - (*number*) optional, the number of rows in a span\n    - <strong>colspan</strong> - (*number*) optional, the number of columns in a span\n    - <strong>text</strong> - (*string|number*) optional, the content of a span\n    - <strong>css</strong> - (*string*) optional, the name of a CSS class applied to a span\n- relatedapi: spans, addSpan, removeSpan\n\n\n### paint\n\n- short: repaints a grid on a page\n- example:\n~~~js\ngrid.paint();\n~~~\n\n\n### removeCellCss\n\n- short:removes a style from a cell\n- params:\n    - row   string,number       the id of a row\n    - col   string,number       the id of a column\n    - css   string              the name of the CSS class\n- example:\n~~~js\ngrid.removeCellCss("1", "b", "myCustomClass");\n~~~\n\n- relatedapi:addCellCss\n\n### removeRowCss\n\n- short:removes a style from a row\n- params:\n    - id    string,number       the id of a row\n    - css   string              the name of the CSS class\n- example:\n~~~js\ngrid.removeRowCss("2", "myCustomClass");\n~~~\n\n- relatedapi:addRowCss\n\n### removeSpan  \n\n- short: removes a cols/rows span \n- params:\n    - row   string,number   the id of a row\n    - col   string,number   the id of a column\n- example:\n~~~js\ngrid.removeSpan("10","a"); \n~~~\n- relatedapi:spans, addSpan, getSpan\n\n\n### scroll  \n\n- short: scrolls a grid according to specified coordinates\n- params:\n    - x     number      the X coordinate\n    - y     number      the Y coordinate\n- example:\n~~~js\ngrid.scroll(75,230);\n~~~\n\n\n\n\n### scrollTo\n\n- short: scrolls a grid to a specified cell\n- params:\n    - row   string,number   the id of a row\n    - col   string,number   the id of a column\n- example:\n~~~js\ngrid.scrollTo("15","c");\n~~~\n\n\n\n### setColumns  \n\n- short: sets headers for columns \n- params: \n    - columns   array   an array of objects with configuration of columns\n- example:\n~~~js\ngrid.setColumns([\n    { id: "a", header: [{ text: "New header for column a" }] },\n    { id: "b", header: [{ text: "New header for column b" }] },\n    // more columns objects\n]);\n// grid.paint();\n~~~\n- descr:\nEach column object may contain the followings fields:\n- <strong>id</strong> - (*string|number*) the id of a column\n- <strong>width</strong> - (*number*) the width of a column\n- <strong>header</strong> - (*array*) an array of objects with header rows configuration. Each header object may include:\n    - <strong>text</strong> - (*string*|*number*) the text of a header\n    - <strong>colspan</strong> - (*number*) the number of columns in a colspan\n    - <strong>css</strong> - (*any*) styling to be applied to a header\n    - <strong>content</strong> -  (*string*) additional content of a header, which can be:\n        - a filter: "inputFilter" or "selectFilter"\n        - one of the methods that process values in a column and show result in the header: "avg" | "sum" | "max" | "min"\n        - some other string\n- <strong>footer</strong> - (*array*) an array of objects with footer rows configuration. Each footer object may include:\n    - <strong>text</strong> - (*string*|*number*) the text of a header\n    - <strong>colspan</strong> - (*number*) the number of columns in a colspan\n    - <strong>css</strong> - (*any*) styling to be applied to a header\n    - <strong>content</strong> -  (*string*) additional content of a header, which can be:\n        - a filter: "inputFilter" or "selectFilter"\n        - one of the methods that process values in a column and show result in the footer: "avg" | "sum" | "max" | "min"\n        - some other string\n- <strong>maxWidth</strong> - (*number*) the maximal width to be set for a column\n- <strong>mark</strong> - (*object|function*) returns a template for marking a cell(s)\n    - as an *object* contains <strong>min</strong> and <strong>max</strong> properties, to apply desired CSS classes to cells with minimal|maximal values in a column \n    - as a *function* takes several parameters:\n        - <strong>cell</strong> - (*string*) the value of a cell\n        - <strong>columnCells</strong> - (*array*) an array of all cell values in the specified column\n        - <strong>row</strong> - (*object*) an object with all cells in a row\n        - <strong>col</strong> - (*object*) the config of a column (see the <strong>columns</strong> config)      \n- <strong>type</strong> - (*string*) the type of a column: "string"|"number"|"boolean"|"any"\n- <strong>template</strong> - (*function*) returns a template with content for a cell(s). Takes 3 parameters:\n    - <strong>cellValue</strong> - (*any*) the value of a cell\n    - <strong>row</strong> - (*object*) an object with all cells in a row\n    - <strong>col</strong> - (*object*) the config of a column (see the <strong>columns</strong> config)          \n\n\n\nProperties\n--------------\n\n### columns\n\n- short: specifies the configuration of grid columns\n- type: array\n- example:\n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [\n        { width: 100, id: "a", header: [{ text: "#" }] },\n        { width: 100, id: "b", header: [{ text: "Title" }] },\n        { width: 200, id: "c", header: [{ text: "Name" }] },\n        { width: 200, id: "d", header: [{ text: "Address" }] }\n    ],\n    data: dataset\n});\n~~~\n- descr:\nEach column object may contain a set of properties described below:\n- <strong>id</strong> - (*string|number*) the id of a column\n- <strong>width</strong> - (*number*) the width of a column\n- <strong>header</strong> - (*array*) an array of objects with header rows configuration. Each header object may include:\n    - <strong>text</strong> - (*string*|*number*) the text of a header\n    - <strong>colspan</strong> - (*number*) the number of columns in a colspan\n    - <strong>css</strong> - (*any*) styling to be applied to a header\n    - <strong>content</strong> -  (*string*) additional content of a header, which can be:\n        - a filter: "inputFilter" or "selectFilter"\n        - one of the methods that process values in a column and show result in the header: "avg" | "sum" | "max" | "min"\n        - some other string\n- <strong>footer</strong> - (*array*) an array of objects with footer rows configuration. Each footer object may include:\n    - <strong>text</strong> - (*string*|*number*) the text of a header\n    - <strong>colspan</strong> - (*number*) the number of columns in a colspan\n    - <strong>css</strong> - (*any*) styling to be applied to a header\n    - <strong>content</strong> -  (*string*) additional content of a header, which can be:\n        - a filter: "inputFilter" or "selectFilter"\n        - one of the methods that process values in a column and show result in the footer: "avg" | "sum" | "max" | "min"\n        - some other string\n- <strong>maxWidth</strong> - (*number*) the maximal width to be set for a column\n- <strong>mark</strong> - (*object|function*) returns a template for marking a cell(s)\n    - as an *object* contains <strong>min</strong> and <strong>max</strong> properties, to apply desired CSS classes to cells with minimal|maximal values in a column \n    - as a *function* takes several parameters:\n        - <strong>cell</strong> - (*string*) the value of a cell\n        - <strong>columnCells</strong> - (*array*) an array of all cell values in the specified column\n        - <strong>row</strong> - (*object*) an object with all cells in a row\n        - <strong>col</strong> - (*object*) the config of a column (see the <strong>columns</strong> config)      \n- <strong>type</strong> - (*string*) the type of a column: "string"|"number"|"boolean"|"any"\n- <strong>template</strong> - (*function*) returns a template with content for a cell(s). Takes 3 parameters:\n    - <strong>cellValue</strong> - (*any*) the value of a cell\n    - <strong>row</strong> - (*object*) an object with all cells in a row\n    - <strong>col</strong> - (*object*) the config of a column (see the <strong>columns</strong> config)          \n\n\n\n\n### spans\n\n- short:  describes the configuration of cols/rows spans\n    \n- type: array\n- example:\n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    spans: [\n        {row:"0", column:"a", rowspan:5 },\n        {row:"0", column:"b", rowspan:9, text:"<h2>Some content here</h2>"},\n        {row:"0", column:"c", colspan:2, text:"Some content"},\n        {row:"10", column:"a", colspan:4, text:"Some header", css:"myCustomColspan"}\n    ],\n    data: dataset\n});\n~~~\n\n- descr:\nEach object in the spans array contains the following properties:\n    - <strong>row</strong> - (*string|number*) obligatory, the id of a row\n    - <strong>column</strong> - (*string|number*) obligatory, the id of a column\n    - <strong>rowspan</strong> - (*number*) optional, the number of rows in a span\n    - <strong>colspan</strong> - (*number*) optional, the number of columns in a span\n    - <strong>text</strong> - (*string|number*) optional, the content of a span\n    - <strong>css</strong> - (*string*) optional, the name of a CSS class applied to a span\n\n- related: addSpan, getSpan, removeSpan\n\n### data\n\n- short:specifies an array of data objects to set into the grid\n- type:array\n- example:\n~~~js\nvar dataset = [\n    {\n        "id": 0,\n        "a": 1,\n        "b": "Linwood Long long long",\n        "c": "Petersen",\n        "d": "Dahlgreen Place"\n    },\n    {\n        "id": 1,\n        "a": 2,\n        "b": "Edenburg",\n        "c": "Agnes",\n        "d": "Gem Street"\n    },\n    // more columns\n];\n\n\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    data: dataset\n});\n~~~\n\n\n \n###headerRowHeight\n\n- short: sets the height of rows in the header\n- type: number\n- default: 40\n- example:\n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    headerRowHeight: 50\n});\n~~~\n\n- descr: \nThe height of the header is calculated as a sum of all row heights in it.\n\n\n###footerRowHeight\n\n- short:sets the height of rows in the footer\n- type: number\n- default: 40\n- example:\n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    footerRowHeight: 50\n});\n~~~\n\n- descr: \nThe height of the footer is calculated as a sum of all row heights in it.\n\n\n###columnsAutoWidth\n\n- short: defines whether the width of columns is automatically adjusted to the width of their content\n- type: boolean,number\n- example:\n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    columnsAutoWidth: true, /*!*/\n    data: dataset\n});\n~~~\n- descr:\nAt the moment "number" type defines the number of the last column that should be auto adjusted.\n\n\n\n###rowHeight\n\n- short: defines the height of a row in a grid\n- type: number\n- default: 40\n- example:\n\n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    rowHeight: 30, /*!*/\n    data: dataset\n});\n~~~\n\n\n###width\n\n- short: sets the width of a grid \n- type: number\n- example:\n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    width: 400,  /*!*/\n    data: dataset\n});\n~~~\n\n###height\n\n- short: sets the height of a grid\n- type:number\n- example: \n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    height: 400,   /*!*/\n    data: dataset\n});\n~~~\n\n\n###headerSort\n\n- short: defines whether sorting on clicking headers of columns is enabled\n- type: boolean\n- default: true\n- example: \n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    headerSort:false,  /*!*/\n    data: dataset\n});\n~~~\n\n\n###rowCss\n\n- short: sets style for a row\n- type: function\n- example: \n~~~js\n<style>\n    .my_custom_row {\n        background: coral;\n    }\n</style>\n\n\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    rowCss: function (row) { return row.custom ? "my_custom_row" : "" }, /*!*/\n    data: dataset\n});\n~~~\n\n- descr:\nThe function takes the id of a row as a parameter and returns a string with the name of a CSS class.\n\n\n###splitAt\n\n- short: sets the number of frozen columns\n- type:number\n- example:\n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    splitAt:2,  /*!*/\n    data: dataset\n});\n~~~\n\n\n###selection\n\n- short: enables selection in a grid\n- type:boolean\n- default: false\n- example: \n~~~js\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    selection:true,  /*!*/\n    data: dataset\n});\n~~~\n\n\n###fitToContainer\n\n- short: makes grid to fit the size of a container\n- type: boolean\n- default: false\n- example: \n~~~js\n<div id="grid_container" style={{width: \'600px\', height: \'400px\'}}></div>\n\n\nvar grid = new dhx.Grid("grid_container", {\n    columns: [// columns config],\n    // grid will be adjusted to the size of container\n    fitToContainer:true, /*!*/\n    data: dataset\n});\n~~~\n- descr: \n:::note\nPlease note that if a grid has its own sizes specified, their values will redefine the size of the container.\n:::\n\n\nEvents\n-----------\n\n###Scroll \n\n- short: fires on scrolling a grid\n- params:\n    - coords    object      an object with new top and left coordinates\n- example: \n~~~js\ngrid.events.on("Scroll", function({top,left}){\n    console.log("The grid is scrolled to "+top,left);\n});\n~~~\n\n###Sort\n\n- short: fires on sorting a column by clicking on its header\n- params:\n    - id    string,number   the id of a column\n- example: \n~~~js\ngrid.events.on("Sort", function(id){\n    console.log("The grid is sorted by the "+id+" column");\n});\n~~~    \n    \n###Expand \n\n- short: fires on expanding a treegrid\n- params:\n    - rowId     string,number       the id of an expanded row\n- example:\n~~~js\ngrid.events.on("Expand", function(rowId){\n    // your logic here\n});\n~~~\n\n\n###HeaderInput\n\n- short: fires on typing text in an input of a column\'s header\n- params: \n    - value     string,number       an entered value\n    - colId     string,number       the id of a column\n    - filter    string              the type of a filter: "inputFilter" or "selectFilter"\n- example:\n~~~js\ngrid.events.on("HeaderInput", function(value,colId,filter){\n    console.log("You\'ve entered "+value+" into the "+colId+" column");\n});\n~~~  \n\n<h3 id="cellclick">CellClick</h3>\n\n- short: fires on click on a grid cell\n- params:\n    - row           object      an object with a row configuration\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("CellClick", function(row,column,e){\n     // your logic here\n});\n~~~\n\n\n###CellRightClick \n\n- short: fires on right click on a grid cell\n- params:\n    - row           object      an object with a row configuration\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("CellRightClick", function(row,column,e){\n     // your logic here\n});\n~~~\n\n\n###CellMouseOver\n\n- short: fires on moving the mouse pointer over a grid cell\n- params:\n    - row           object      an object with a row configuration\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("CellMouseOver", function(row,column,e){\n    // your logic here\n});\n~~~\n\n\n###CellMouseDown\n\n- short: fires before releasing the left mouse button when clicking on a grid cell\n- params:\n    - row           object      an object with a row configuration\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("CellMouseDown", function(row,column,e){\n     // your logic here\n});\n~~~\n\n\n###CellDblClick\n\n- short: fires on double-click on a grid cell\n- params:\n    - row           object      an object with a row configuration\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("CellDblClick", function(row,column,e){\n    // your logic here\n});\n~~~\n\n\n###HeaderCellClick\n\n- short: fires on click on a grid header cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("HeaderCellClick", function(column,e){\n    // your logic here\n});\n~~~\n\n\n###FooterCellClick \n\n- short: fires on click on a grid footer cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("FooterCellClick", function(column,e){\n    // your logic here\n});\n~~~\n\n###HeaderCellRightClick\n\n- short: fires on right click on a grid header cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("HeaderCellRightClick", function(column,e){\n    // your logic here\n});\n~~~\n\n\n###FooterCellRightClick \n\n- short: fires on right click on a grid footer cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("FooterCellRightClick", function(column,e){\n    // your logic here\n});\n~~~\n\n\n###HeaderCellMouseOver\n\n- short: fires on moving the mouse pointer over a grid header cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("HeaderCellMouseOver", function(column,e){\n    // your logic here\n});\n~~~\n\n###FooterCellMouseOver \n\n- short: fires on moving the mouse pointer over a grid footer cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("FooterCellMouseOver ", function(column,e){\n    // your logic here\n});\n~~~\n\n###HeaderCellMouseDown \n\n- short: fires on moving the mouse pointer over a grid header cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("HeaderCellMouseDown", function(column,e){\n    // your logic here\n});\n~~~\n\n###FooterCellMouseDown\n\n- short: fires on moving the mouse pointer over a grid footer cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("FooterCellMouseDown", function(column,e){\n    // your logic here\n});\n~~~\n\n\n###HeaderCellDblClick \n\n- short: fires on double-click on a grid footer cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("HeaderCellDblClick", function(column,e){\n    // your logic here\n});\n~~~\n\n###FooterCellDblClick \n\n\n- short: fires on double-click on a grid footer cell\n- params:\n    - column        object      an object with a column configuration\n    - e             Event       a native event object\n- example:\n~~~js\ngrid.events.on("FooterCellDblClick", function(column,e){\n    // your logic here\n});\n~~~\n\n\n\n- check, add links to samples, related api and guides<br/>\n- add pages/links for objects (events, export)?<br/>\n- css config\n\n')))}g.isMDXComponent=!0}}]);