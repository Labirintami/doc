(window.webpackJsonp=window.webpackJsonp||[]).push([[989],{1048:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return o})),n.d(e,"metadata",(function(){return s})),n.d(e,"rightToc",(function(){return d})),n.d(e,"default",(function(){return c}));var i=n(2),a=n(6),r=(n(0),n(1808)),o={sidebar_label:"Step 4. Add a Grid",title:"Step 4. Add a Grid"},s={unversionedId:"tutorial/basic_application/step4",id:"tutorial/basic_application/step4",isDocsHomePage:!1,title:"Step 4. Add a Grid",description:"` todo \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043d\u0443\u0436\u043d\u0430",source:"@site/docs/tutorial/basic_application/step4.md",slug:"/tutorial/basic_application/step4",permalink:"/tutorial/basic_application/step4",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/tutorial/basic_application/step4.md",version:"current",sidebar_label:"Step 4. Add a Grid"},d=[],l={rightToc:d};function c(t){var e=t.components,n=Object(a.a)(t,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-todo",metastring:"\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043d\u0435 \u043d\u0443\u0436\u043d\u0430","\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430":!0,"\u043d\u0435":!0,"\u043d\u0443\u0436\u043d\u0430":!0},'\nNow let\u2019s consider  how start to work with such DHTMLX component as Grid.\n\n<div style={{fontWeight: \'bold\', color: \'rgb(65, 65, 65)\', paddingTop: \'10px\', fontSize: \'15px\'}}>To add a Grid on the page:</div>\n\n1\\. At first, we need to initialize a Grid with the dhx.Grid object constructor:  \n\n~~~js\nvar grid = new dhx.Grid(null, {\n    // the grid columns\n    columns: \n        [\n           { id: "id", header: [{ text: "#", rowspan: 2 }] },\n           { id: "first_name", header: [{ text: "First name" },\n                { content: "inputFilter" }] },\n           { id: "last_name", header: [{ text: "Last name" },\n                { content: "inputFilter" }] }, \n           { id: "vip", header: [{ text: "Premium", rowspan: 2 }], \n     //returns a template with content "Premium user" or "Default user"  for a cell(s)\n                template: function (text, row, col) { \n                   return text ? "Premium user" : "Default user"\n                } \n           }\n           // other columns\n        ],\n    fitToContainer: true, //makes a grid to fit the size of a container\n    selection: "row", //enables row selection  in a grid\n});\n~~~\n\n<i>The constructor takes two parameters:\n\n- the first parameter, which is the HTML container for Grid will be `null`, as we are attaching the grid to the layout, not to an HTML container \n- the second parameter is an object where we specify a set of Grid properties </i>\n\nYou can read more about Grid properties in the [API](/grid/api/refs/grid) and in the [Configuration](/grid/configuration#data) article. \n\n2\\. Next, we can easily attach the grid to the "grid-cell" of Layout, as well as we did with the toolbar:\n\n~~~js\nlayout.cell("grid-cell").attach(grid);\n~~~\n\n<img style={{margin: \'19px\'}} src="tutorial/basic_application/grid_003.png"/>\n\n3\\. Also we need to prepare a data set that will be loaded into the Grid later. An example of a Grid data set is given below:\n\n~~~js\nvar grid_dataset = [\n    {\n        "id": 1, "first_name": "Gary", "last_name": "Ortiz",\n        "email": "gortiz0@mapy.cz", "country": "Indonesia", "vip": false \n    },\n    {\n        "id": 2, "first_name": "Albert", "last_name": "Williamson", \n        "email": "awilliamson1@narod.ru", "country": "China","vip": true \n    },\n    { \n        "id": 3, "first_name": "Mildred", "last_name": "Fuller", \n        "email": "mfuller2@npr.org", "country": "Peru", "vip": true \n    }\n    //more options \n]; \n~~~\n\n\n\n<div id="tutorial_step">\n    <a id="next_step" href="tutorial/basic_application/step5.md"></a>\n</div>\n\n')))}c.isMDXComponent=!0}}]);