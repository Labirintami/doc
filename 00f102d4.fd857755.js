(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{61:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),i=(a(0),a(1808)),l={sidebar_label:"Step 7. Display Data in the Chart",title:"Step 7. Display Data in the Chart"},s={unversionedId:"tutorial/basic_application/step7",id:"tutorial/basic_application/step7",isDocsHomePage:!1,title:"Step 7. Display Data in the Chart",description:"Before displaying data in the chart we need to process grid data.",source:"@site/docs/tutorial/basic_application/step7.md",slug:"/tutorial/basic_application/step7",permalink:"/tutorial/basic_application/step7",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/tutorial/basic_application/step7.md",version:"current",sidebar_label:"Step 7. Display Data in the Chart"},c=[],o={rightToc:c};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Before displaying data in the chart we need to process grid data."),Object(i.b)("p",null,"##Process grid data"),Object(i.b)("p",null,"To do that, we'll create a  ",Object(i.b)("b",null,"getCountUsers()")," function given below:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'function getCountUsers(){     \n    vipUser = grid.data.reduce(function(acc, item) {    \n        return item.vip ? acc + 1 : acc;           \n    }, 0);\n    defUser = grid.data.getLength() - vipUser; \n\n    var pieData = []; \n\n    if (vipUser > 0) { \n        pieData.push( { value: vipUser, color: "#394E79", \n            text: "Premium Users" })\n        }\n    if  (defUser > 0) {\n        pieData.push( { value: defUser, color: "#5E83BA", \n            text: "Default Users" })\n        }            \n    return pieData; //return the processed data for the chart\n};\n')),Object(i.b)("p",null,"Let's look at its logic in detail."),Object(i.b)("p",null,"First, we count the number of VIP users through the ",Object(i.b)("b",null,"reduce()")," method of Data Collection:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"vipUser = grid.data.reduce(function(acc, item) {    \n    return item.vip ? acc + 1 : acc;           \n}, 0);\n")),Object(i.b)("p",null,"After that we determine the total number of users by using the ",Object(i.b)("b",null,"getLength()")," method of Tree Collection and then calculate the number of default users."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"defUser = grid.data.getLength() - vipUser;\n")),Object(i.b)("p",null,"Finally, we create an array to add data about the number of default and vip users with the help of the ",Object(i.b)("strong",null,"push()")," operation. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'var pieData = []; // create an array\n\nif (vipUser > 0) { \n    pieData.push( { value: vipUser, color: "#394E79", \n        text: "Premium Users" })\n    }\nif  (defUser > 0) {\n    pieData.push( { value: defUser, color: "#5E83BA", \n        text: "Default Users" })\n};           \n')),Object(i.b)("p",null,"As a result of the ",Object(i.b)("b",null,"getCountUsers()")," function call we get a dataset for the chart."),Object(i.b)("p",null,"##Display data in the chart"),Object(i.b)("p",null,"After processing grid data, we need to show it in the chart."),Object(i.b)("p",null,"To display the data loaded in the chart, we will use the ",Object(i.b)("b",null,"Load")," event of data_collection/api/refs/datacollection.md. Inside the event handler we'll call the ",Object(i.b)("b",null,"parse()")," method to parse data in the chart."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'grid.data.events.on("Load", function(){\n    chart.data.parse(getCountUsers());\n});\n')),Object(i.b)("p",null,"When data is changed in the grid, we should update the chart data as well. For this purpose we'll use the ",Object(i.b)("b",null,"Change")," event of data_collection/api/refs/datacollection.md."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'grid.data.events.on("Change", function(id,status,updatedItem){\n    chart.data.parse(getCountUsers());\n});\n')),Object(i.b)("p",null,"##Get the result"),Object(i.b)("p",null,"After finishing all the steps described in the tutorial, you get a mini app that looks like this:"),Object(i.b)("img",{style:{margin:"16px"},src:"tutorial/basic_application/chart.png"}),Object(i.b)("div",{id:"tutorial_step"},Object(i.b)("a",{id:"next_step",href:"tutorial/index.md"})))}p.isMDXComponent=!0}}]);