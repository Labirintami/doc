(window.webpackJsonp=window.webpackJsonp||[]).push([[342],{401:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var i=n(2),o=n(6),a=(n(0),n(1808)),r={sidebar_label:"Work with TreeGrid",title:"Work with TreeGrid",description:null},d={unversionedId:"treegrid/usage",id:"treegrid/usage",isDocsHomePage:!1,title:"Work with TreeGrid",description:"Working with columns and cells",source:"@site/docs/treegrid/usage.md",slug:"/treegrid/usage",permalink:"/treegrid/usage",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/treegrid/usage.md",version:"current",sidebar_label:"Work with TreeGrid",sidebar:"docs",previous:{title:"Data Loading",permalink:"/treegrid/data_loading"},next:{title:"Work with Selection Object",permalink:"/treegrid/usage_selection"}},l=[{value:"Working with columns and cells",id:"working-with-columns-and-cells",children:[{value:"Setting columns configuration",id:"setting-columns-configuration",children:[]},{value:"Getting configuration of a column",id:"getting-configuration-of-a-column",children:[]}]}],s={rightToc:l};function c(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"working-with-columns-and-cells"},"Working with columns and cells"),Object(a.b)("p",null,"The API of dhtmlxTreeGrid allows setting configuration of columns, getting an object of a particular column as well as the parameters of a certain cell."),Object(a.b)("h3",{id:"setting-columns-configuration"},"Setting columns configuration"),Object(a.b)("p",null,"You can specify the configuration of TreeGrid columns on the fly via the ",Object(a.b)("a",{parentName:"p",href:"/treegrid/api/treegrid_setcolumns_method"},"setColumns()")," method. It takes an array with columns objects as a parameter."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},'treegrid.setColumns([\n    { id: "a", header: [{ text: "New header for column a" }] },\n    { id: "b", header: [{ text: "New header for column b" }] },\n    // more columns objects\n]);\n')),Object(a.b)("p",null,"You can find the full list of the available configuration options of a TreeGrid column ",Object(a.b)("a",{parentName:"p",href:"/treegrid/configuration#columns"},"here"),".      "),Object(a.b)("h3",{id:"getting-configuration-of-a-column"},"Getting configuration of a column"),Object(a.b)("p",null,"It is possible to return an object with attributes of a column via its id. Use the ",Object(a.b)("a",{parentName:"p",href:"/treegrid/api/treegrid_getcolumn_method"},"getColumn()")," method for this purpose."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},'var column = treegrid.getColumn("b"); // ->\n// {width: 100, id: "b", header: Array(1), $cellCss: {\u2026}, type: "string"\n')),Object(a.b)("p",null,"The method returns an object with configuration of the specified column. Such an object contains a set of fields:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-todo",metastring:"\u0441\u043f\u0440\u043e\u0441\u0438\u0442\u044c, \u043d\u0443\u0436\u043d\u043e \u043b\u0438","\u0441\u043f\u0440\u043e\u0441\u0438\u0442\u044c,":!0,"\u043d\u0443\u0436\u043d\u043e":!0,"\u043b\u0438":!0},'<table className="webixdoc_links">\n    <tbody>\n        <tr>\n            <td className="webixdoc_links0"><b>id</b></td>\n            <td>(<i>string|number</i>) the id of a column</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>width</b></td>\n            <td>(<i>number</i>) the width of a column</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>header</b></td>\n            <td>(<i>array</i>) an array of objects with header rows configuration. Each header object may include:\n                <ul>\n                    <li><b>text</b> - (<i>string|number</i>) the text of a header</li>\n                    <li><b>align</b> - (<i>string</i>) aligns data in the header: "left"|"center"|"right"</li>\n                    <li><b>colspan</b> - (<i>number</i>) the number of columns in a colspan</li>\n                    <li><b>rowspan</b> - (<i>number</i>) the number of rows in a rowspan</li>\n                    <li><b>css</b> - (<i>any</i>) styling to be applied to a header</li>\n                    <li><b>content</b> - (<i>string</i>) additional content of a header, which can be:\n                    <ol>- a filter: "inputFilter" | "selectFilter" | "comboFilter"</ol>\n                    <ol>- one of the methods that process values in a column and show result in the header:<br/> "avg" | "sum" | "max" | "min" </ol>\n                    <ol> - some other string</ol>\n                    </li>\n                    <li><b>filterConfig</b> - (<i>object</i>) optional, a configuration object for "comboFilter". It can contain a set of properties:\n                    <ol>- <b>filter</b> - (<i>function</i>) sets a custom function for filtering Combo Box options</ol>\n                    <ol>- <b>readonly</b> - (<i>boolean</i>) makes ComboBox readonly (it is only possible to select options from the list, without entering words in the input)</ol>\n                    <ol>- <b>template</b> - (<i>function</i>) sets a template of displaying options in the popup list</ol>\n                    <ol>- <b>placeholder</b> - (<i>string</i>) sets a placeholder in the input of ComboBox</ol>\n                    <ol>- <b>virtual</b> - (<i>boolean</i>) enables dynamic loading of data on scrolling the list of options</ol>\n                    </li>\n                </ul>\n            </td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>htmlEnable</b></td>\n            <td>(<i>boolean</i>) if set to <i>true</i>, specifies the HTML content (inner HTML) of a column. If set to <i>false</i>, the content of the column cells will be displayed as a <i>string</i> value</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>footer</b></td>\n            <td>(<i>array</i>) an array of objects with footer rows configuration. Each footer object may include:\n                <ul>\n                    <li><b>text</b> - (<i>string|number</i>) the text of a footer</li>\n                    <li><b>colspan</b> - (<i>number</i>) the number of columns in a colspan</li>\n                    <li><b>rowspan</b> - (<i>number</i>) the number of rows in a rowspan</li>\n                    <li><b>css</b> - (<i>any</i>) styling to be applied to a footer</li>\n                    <li><b>content</b> - (<i>string</i>) additional content of a footer, which can be:\n                    <ol>- a filter: "inputFilter" | "selectFilter" | "comboFilter"</ol>\n                    <ol>- one of the methods that process values in a column and show result in the footer:<br/> "avg" | "sum" | "max" | "min" </ol>\n                    <ol> - some other string</ol>\n                    </li>\n                </ul>\n            </td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>maxWidth</b></td>\n            <td>(<i>number</i>) the maximal width to be set for a column</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>minWidth</b></td>\n            <td>(<i>number</i>) the minimal width to be set for a column</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>mark</b></td>\n            <td>(<i>object|function</i>) returns a template for marking a cell(s)\n                <ul>\n                    <li>as an <i>object</i> contains <b>min</b> and <b>max</b> properties, to apply desired CSS classes to cells with minimal|maximal values in a column </li>\n                    <li>as a <i>function</i> takes several parameters:\n                        <ol>- <b>cell</b> - (<i>string</i>) the value of a cell</ol>\n                        <ol>- <b>columnCells</b> - (<i>array</i>) an array of all cell values in the specified column</ol>\n                        <ol>- <b>row</b> - (<i>object</i>) an object with all cells in a row</ol>\n                        <ol>- <b>col</b> - (<i>object</i>) the config of a column (see the <b>columns</b> config)</ol>\n                    </li>    \n                </ul>\n            </td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>resizable</b></td>\n            <td>(<i>boolean</i>) defines whether a column can be resized</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>type</b></td>\n            <td>(<i>string</i>) the type of a column: "string"|"number"|"boolean"|"any"|"date"</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>dateFormat</b></td>\n            <td>(<i>string</i>) defines <a href="https://docs.dhtmlx.com/suite/calendar__api__calendar_dateformat_config.html">the format of dates</a> (type:"date")</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>editorType</b></td>\n            <td>(<i>string</i>) the type of an editor used in a column: "input"|"select"|"datePicker"|"checkbox"|"combobox"</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>options</b></td>\n            <td>(<i>array</i>) a set of options to be displayed in the editor of a cell (editorType: "select"|"combobox")</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>template</b></td>\n            <td>(<i>function</i>) returns a template with content for a cell(s). Takes 3 parameters:\n                <ul>\n                    <li><b>cellValue</b> - (<i>any</i>) the value of a cell</li>\n                    <li><b>row</b> - (<i>object</i>) an object with all cells in a row</li>\n                    <li><b>col</b> - (<i>object</i>) the config of a column (see the <b>columns</b> config)</li>\n                </ul>\n            </td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>hidden</b></td>\n            <td>(<i>boolean</i>) defines whether a column is hidden</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>draggable</b></td>\n            <td>(<i>boolean</i>) defines whether a column is draggable</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>editable</b></td>\n            <td>(<i>boolean</i>) defines whether a column is editable</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>sortable</b></td>\n            <td>(<i>boolean</i>) defines whether a column is sortable</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>adjust</b></td>\n            <td>(<i>boolean|string</i>) defines whether the width of a column is automatically adjusted to its content</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>autoWidth</b></td>\n            <td>(<i>boolean</i>) enables/disables the ability of a column to adjust its size to the size of TreeGrid</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>align</b></td>\n            <td>(<i>string</i>) aligns data in a column: "left" | "center" | "right"</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>tooltip</b></td>\n            <td>(<i>boolean</i>) enables a tooltip on hovering over the content of a column, <i>true</i> by default</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>$cellCss</b></td>\n            <td>(<i>array</i>) <b>readonly</b>, an array of objects with CSS classes (as key:value pairs) for each cell of a column</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>$uniqueData</b></td>\n            <td>(<i>array</i>) <b>readonly</b>, an array that contains some unique data, can\'t be redefined</td>\n        </tr>\n    </tbody>\n</table>\n\n``` todo\n\n### Getting configuration of a cell\n\nThere is the [getCellRect()](/treegrid/api/treegrid_getcellrect_method) method that returns an object with coordinates of a cell. The method takes as parameters the ids of the row and the column the cell belongs to:\n\n~~~js\nvar rect = treegrid.getCellRect("1","c");\n// -> {x: 200, y: -40, height: 40, width: 200}\n~~~\n\nThe return object includes the following attributes:\n\n<table className="webixdoc_links">\n    <tbody>\n        <tr>\n            <td className="webixdoc_links0"><b>x</b></td>\n            <td>(<i>number</i>) the X coordinate of a cell</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>y</b></td>\n            <td>(<i>number</i>) the Y coordinate of a cell</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>height</b></td>\n            <td>(<i>number</i>) the height of a cell</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>width</b></td>\n            <td>(<i>number</i>) the width of a cell</td>\n        </tr>\n    </tbody>\n</table>\n\nGetting header filter\n---------------------\n\nYou may want to manipulate a filter specified in the header of a treegrid, for example, to set/unset the focus on the filter, to change the filter, or clear it. For that, you should get an object of the header filter by column id via the [getHeaderFilter](/treegrid/api/treegrid_getheaderfilter_method) method: \n\n~~~js\nvar countryFilter = treegrid.getHeaderFilter("capital");\n// -> return HTMLElement\n// <label className="dhx_grid-filter__label dxi dxi-magnify">...</label>\n\ncountryFilter.focus();\n\n// or\n\nvar countryFilter = treegrid.getHeaderFilter("name");\n// -> return Combobox\n// Combobox\xa0{_uid: "u1597322507580", config: {\u2026}, events: EventSystem, \n// data: DataCollection, popup: Popup,\xa0\u2026}\n\ncountryFilter.blur();\n~~~\n\n{{sample treegrid/03_usage/16_get_header_filter.html}}\n\nThe method returns either an HTML object or an object with Combobox configuration.\n\nHiding/showing a column\n--------------------------\n\nIt is possible to show and hide a column in the grid via the [showColumn()](/treegrid/api/treegrid_showcolumn_method) and [hideColumn()](/treegrid/api/treegrid_hidecolumn_method) methods. \n\n~~~js\n//showing a column\ntreegrid.showColumn(col);\n//hiding a column\ntreegrid.hideColumn(col);\n~~~\n\nhttps://snippet.dhtmlx.com/1gekn97m TreeGrid. Show/Hide column\n\nSince the object of a column has the [hidden](/treegrid/configuration#hiddencolumns) property, the showColumn() method changes it value to *false* while the hideColumn() method changes the hidden property to *true*.\n\nChecking visibility of a column\n----------------------------------\n\nYou can check whether a column is hidden or shown on a page using the treegrid/api/treegrid_iscolumnhidden_method.md method. The method returns *true*, if a column is visible, and *false* if it\'s hidden.\n\n~~~js\ntreegrid.isColumnHidden("country"); // -> true|false\n~~~\n\nhttps://snippet.dhtmlx.com/fcjfp19d TreeGrid. Is column hidden\n\nHiding/showing a row\n--------------------------\n\nStarting from v7.0, it is possible to show and hide a row in the treegrid via the [showRow()](/treegrid/api/treegrid_showrow_method) and [hideRow()](/treegrid/api/treegrid_hiderow_method) methods. \n\n~~~js\n//showing a row\ntreegrid.showRow(rowId);\n//hiding a row\ntreegrid.hideRow(rowId);\n~~~\n\n{{sample    treegrid/03_usage/17_show_hide_row.html}}\n\n\nChecking visibility of a row\n----------------------------------\n\nYou can check whether a row is hidden or shown on a page using the treegrid/api/treegrid_isrowhidden_method.md method. The method returns *true*, if a row is hidden, and *false* if it\'s visible.\n\n~~~js\ntreegrid.isRowHidden("1"); // -> true|false\n~~~\n\n{{sample    treegrid/03_usage/17_show_hide_row.html}}\n\nAdding/removing spans\n---------------------\n\nYou can manipulate columns and rows spans inside the grid with the help of corresponding API methods: [addSpan()](/treegrid/api/treegrid_addspan_method), [removeSpan()](/treegrid/api/treegrid_removespan_method) and [getSpan()](/treegrid/api/treegrid_getspan_method).\n\n###Adding spans\n\nIn order to add a col/row span into the grid, use the [addSpan()](/treegrid/api/treegrid_addspan_method) method. Pass an object with configuration of a span as a parameter:\n\n~~~js\ntreegrid.addSpan({ \n    row: "0", \n    column: "a", \n    rowspan: 5 \n});\n~~~\n\nThese are possible fields of a span object:\n\n<table className="webixdoc_links">\n    <tbody>\n        <tr>\n            <td className="webixdoc_links0"><b>row</b></td>\n            <td>(<i>string|number</i>) mandatory, the id of a row</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>column</b></td>\n            <td>(<i>string|number</i>) mandatory, the id of a column</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>rowspan</b></td>\n            <td>(<i>number</i>) optional, the number of rows in a span</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>colspan</b></td>\n            <td>(<i>number</i>) optional, the number of columns in a span</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>text</b></td>\n            <td>(<i>string|number</i>) optional, the text in a spanned row/column</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>css</b></td>\n            <td>(<i>string</i>) optional, the name of the CSS class that will be applied to a span</td>\n        </tr>\n    </tbody>\n</table>\n\n###Getting spans\n\nYou can return the col/row span a cell is a part of using the [getSpan()](/treegrid/api/treegrid_getspan_method) method. It takes the ids of the row and the column the cell belongs to as parameters:\n\n~~~js\nvar span = treegrid.getSpan("10","a"); \n// -> {row:"10", column:"a", colspan:4, text:"Some header", css:"myCustomColspan"}\n~~~\n\nAs a result, you\'ll get an object with a span configuration, if any span includes the specified cell. Attributes of a span object are described above.\n\n###Removing spans\n\nTo remove an existing span, make use of the [removeSpan()](/treegrid/api/treegrid_removespan_method) method. It takes the ids of the row and the column as parameters: \n\n~~~js\ntreegrid.removeSpan("10","a");\n~~~\n\nControlling scroll behavior \n-----------------------------\n\nThe API of dhtmlxTreeGrid provides the possibility to set scrolls to the nevessary position and to get the current state of scrolls.\n\n### Scrolling to specific coordinates\n\nYou can scroll grid content to exact position defined by x and y coordinates via the [scroll()](/treegrid/api/treegrid_scroll_method) method. Pass the coordinates as parameters of the method.\n\n~~~js\ntreegrid.scroll(75,230);\n~~~\n\n### Scrolling to specific treegrid cell   \n\nIt is also possible to scroll treegrid content to a particular cell. Pass the ids of the row and the column as parameters:\n\n~~~js\ntreegrid.scrollTo("15","c");\n~~~\n\nhttps://snippet.dhtmlx.com/kxytdnvi TreeGrid. Controlling Scroll Behavior\n\n### Getting the state of scroll\n\nTo return the current state of scroll, use the [getScrollState()](/treegrid/api/treegrid_getscrollstate_method) method. \n\n~~~js\nvar state = treegrid.getScrollState(); // -> {x:0,y:0}\n~~~\n\nIt returns an object with x,y coordinates of a position the grid has been scrolled to.\n\n\nGrouping data\n-----------------\n\nTo make data in TreeGrid well-structured and easily understood you can group data with the help of the [groupBy()](/treegrid/api/treegrid_groupby_method) method. There are two options of grouping data.\n\n###Grouping by a column\n\nTo group the content of a treegrid by values of the specified column, pass the id of the column as a parameter to the <strong>groupBy()</strong> method:\n\n- <strong>id</strong> - (*string*) the id of a column\n\n~~~\ntreegrid.groupBy("age");\n~~~\n\n{{sample treegrid/03_usage/15_group_by.html}}\n\n###Grouping by the result of calculation\n\nYou can pass a function with a rule of grouping data in the treegrid as a parameter to the <strong>groupBy()</strong> method. The function returns the name of a group and takes one parameter: \n\n- <strong>item</strong> - a data item\n\n~~~js\ntreegrid.groupBy(function (item) {\n    if (!item.area || item.area < 0) {\n        return "N.A.";\n    }\n    if (item.area < 25000) {\n        return "Small";\n    } else if (item.area < 60000) {\n        return "Medium";\n    }\n    return "Big";\n});\n~~~\n\n{{sample treegrid/03_usage/15_group_by.html}}\n\nIf necessary, you can set a template to the title of the group via the treegrid/api/treegrid_grouptitletemplate_config.md configuration option.\n\nFiltering data\n------------------\n\nYou can filter grid data by the specified criteria with the help of the <strong>filter()</strong> method of data collection. The method takes as a parameter an object with the properties described below:\n\n<table className="webixdoc_links">\n    <tbody>\n        <tr>\n            <td className="webixdoc_links0"><b>rule</b></td>\n            <td>(<i>object|function</i>) the filtering criteria. It can be:\n            <ul>\n            <li>a filtering function. It takes as a parameter a data item and returns an object with a filtering rule.</li>\n                or:\n                <li>an object with the following attributes:<br/>\n                    - <b>by</b> - (<i>string</i>) mandatory, the id of a column<br/>\n                    - <b>match</b> - (<i>string</i>) mandatory, a pattern to match <br/>\n                    - <b>compare</b> - (<i>function</i>) a function for extended filtering that takes three parameters:\n                    <ol>- <b>value</b> - the value to compare (e.g. a column in a row) </ol>\n                    <ol>- <b>match</b> - a pattern to match </ol>\n                    <ol>- <b>item</b> - a data item the values of which should be compared (e.g. a row) </ol>\n                </li>\n            </ul></td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>config</b></td>\n            <td>(<i>object</i>) optional, an object with two properties:\n                <ul><li><b>type</b> (<i>string</i>) optional, defines the area the filtering will be applied: "all", "level", "leafs"</li>\n                <li><b>level</b> (<i>number</i>) optional, the level the filtering will be applied to</li>\n                <li><b>add</b> (<i>boolean</i>) defines whether each next filtering will be applied to the already filtered data (<i>true</i>), or to the initial data (<i>false</i>, default)</li>\n                <li><b>multiple</b> (<i>boolean</i>) defines whether a filtering rule will be added to the already applied filters (<i>true</i>, default), or previous filters should be removed in advance (<i>false</i>)</li>\n                <ul>\n                </td>\n        </tr>\n    </tbody>\n</table>\n<br/>\n\n~~~js\n// filtering by the specified rule\ntree.data.filter(function (item) {\n    return item.value.toLowerCase().indexOf("a") !== -1;\n});\n\n// filtering the "b" column by value "Tyro"\ntreegrid.data.filter({ by:"b", match:"Tyro" });\n\n// filtering data by several criteria at once\ntreegrid.data.filter({\n    by:"b",\n    compare:function(val,match,item){\n        if(item.a!=="Some"){\n            return val === "New"\n        }\n        return false;\n    }\n});\n~~~\n\nhttps://snippet.dhtmlx.com/epsslwcd TreeGrid. Basic Filter\n\nhttps://snippet.dhtmlx.com/zdecovib TreeGrid. External filter\n\nSorting data\n--------------\n\nIt is possible to sort data in the grid via the <strong>sort()</strong> method of data collection. The method takes an object with the following attributes:\n\n<table className="webixdoc_links">\n    <tbody>\n        <tr>\n            <td className="webixdoc_links0"><b>by</b></td>\n            <td>(<i>string</i>) the id of a column</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>dir</b></td>\n            <td>(<i>string</i>) the direction of sorting "asc" or "desc"</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>as</b></td>\n            <td>(<i>function</i>) a function that specifies the type to sort data as</td>\n        </tr>\n    </tbody>\n</table>\n<br/>\n\n~~~js\ntreeGrid.data.sort({\n    by: "price",\n    dir: "asc",\n    as: function (value) { return value ? value : "" }\n});\n~~~\n\nhttps://snippet.dhtmlx.com/bvfnpvwv TreeGrid. Sorting data\n\nTo discard all applied sorting rules, call the method without parameters:\n\n~~~js\ntreegrid.data.sort();\n~~~\n\n### Custom sorting\n\nYou can also specify the <strong>rule</strong> attribute in a passed object instead of the default ones and set a custom function for sorting. For example:\n\n~~~js\ntreegrid.data.sort({\n    rule: (a, b) => a.id > b.id ? 1 : (a.id < b.id ? -1 : 0) \n});\n~~~\n\nGetting the sorting state\n--------------------------\n\nTo get the current state of sorting data in TreeGrid, use the treegrid/api/treegrid_getsortingstate_method.md method. The method returns an object with two attributes:\n\n<table className="webixdoc_links">\n    <tbody>\n        <tr>\n            <td className="webixdoc_links0"><b>dir</b></td>\n            <td>(<i>string</i>) the sorting direction (desc, asc)</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>by</b></td>\n            <td>(<i>string</i>)the id of a column that the treegrid is sorted by</td>\n        </tr>\n    </tbody>\n</table>\n<br/>\n\n~~~js\nvar state = treegrid.getSortingState(); \n// -> {dir: "desc", by: "country"}\n~~~\n\nhttps://snippet.dhtmlx.com/bdwwhvls TreeGrid. Get sorting state\n\nEditing data\n------------------\n\nYou can easily edit the desired cell of a treegrid with the help of the [editCell()](/treegrid/api/treegrid_editcell_method) method. It takes two parameters:\n\n<table className="webixdoc_links">\n    <tbody>\n        <tr>\n            <td className="webixdoc_links0"><b>row</b></td>\n            <td>(<i>string</i>) the id of a row</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>col</b></td>\n            <td>(<i>string</i>) the id of a column</td>\n        </tr>\n    </tbody>\n</table>\n\nFor example, you can edit the first cell of the "project" column like this:\n\n~~~js\ntreegrid.editCell(grid.data.getId(0),"project");\n~~~\n\nhttps://snippet.dhtmlx.com/zm6wh1ss TreeGrid. Editing data\n\nTo finish editing of a cell, use the [editEnd()](/treegrid/api/treegrid_editend_method) method. The method takes a *boolean* value as a parameter to define whether the edited data will be saved after the editing of a cell is complete (if *true*, the made changes won\'t be saved).\n\n~~~js\ntreegrid.editEnd(); // the edited data will be saved\n\ntreegrid.editEnd(true); // the edited data won\'t be saved\n~~~\n\n:::note\nThe [editEnd()](/treegrid/api/treegrid_editend_method) method does not work if [the type of the column editor](/treegrid/configuration#columneditors) is defined as <strong>checkbox</strong>.\n:::\n\n\nExpanding/collapsing nodes\n-------------------------\n\n### Expand/collapse a certain node\n\nTo expand a particular node in a treegrid by its id, use the treegrid/api/treegrid_expand_method.md method:\n\n~~~js\ntreegrid.expand("native");\n~~~\n\nTo collapse a treegrid node, make use of the treegrid/api/treegrid_collapse_method.md method:\n\n~~~js\ntreegrid.collapse("native");\n~~~\n\nhttps://snippet.dhtmlx.com/1grpsaa2 TreeGrid. Expand/Collapse nodes\n\n### Expand/collapse all nodes\n\nIt is also possible to expand/collapse all TreeGrid nodes using the two corresponding methods - treegrid/api/treegrid_expandall_method.md and treegrid/api/treegrid_collapseall_method.md:\n\n~~~js\n// expand all treegrid nodes\ntreegrid.expandAll();\n// collapse all treegrid nodes\ntreegrid.collapseAll();\n~~~\n\nhttps://snippet.dhtmlx.com/1grpsaa2 TreeGrid. Expand/Collapse nodes\n\nExporting TreeGrid\n-------------------\n\nYou can easily export data of TreeGrid into the Excel or CSV format.\n\n###Exporting data to Excel \n\ndhtmlxTreeGrid provides the possibility to export data from TreeGrid into an Excel file by calling the <strong>export()</strong> method of the export module. The method takes an object with export settings as a parameter.\n\n~~~js\ntreegrid.export.xls({\n    url: "//export.dhtmlx.com/excel"\n});\n~~~\n\nhttps://snippet.dhtmlx.com/zyfois4q TreeGrid. Export\n\nExport settings include:\n\n<table className="webixdoc_links">\n    <tbody>\n        <tr>\n            <td className="webixdoc_links0"><b>url</b></td>\n            <td>(<i>string</i>) the link to the server side where export will be processed. <br/>By default, it is <b>"//export.dhtmlx.com/excel"</b></td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>name</b></td>\n            <td>(<i>string</i>) the name of a ready Excel file</td>\n        </tr>\n    </tbody>\n</table>\n\n###Exporting data to CSV\n\nYou can export data from TreeGrid to the CSV format with the <strong>csv()</strong> method of the Export module. The method takes an object with export settings as a parameter:\n\n<table className="webixdoc_links">\n    <tbody>\n        <tr>\n            <td className="webixdoc_links0"><b>asFile</b></td>\n            <td>(<i>boolean</i>) defines whether TreeGrid should be exported to a file, <i>true</i> by default. To export TreeGrid only as a CSV string, you need to set <i>asFile:false</i>.</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>name</b></td>\n            <td>(<i>string</i>) the name of the exported CSV file (if asFile is not set to <i>false</i>).</td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>flat</b></td>\n            <td>(<i>boolean</i>) defines whether TreeGrid data should be exported as a flat structure; <i>false</i> by default. </td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>rowDelimiter</b></td>\n            <td>(<i>string</i>) a newline ("\\n") by default. A separator between rows, can be a tab - "\\t", or any other value. </td>\n        </tr>\n        <tr>\n            <td className="webixdoc_links0"><b>columnDelimiter</b></td>\n            <td>(<i>string</i>) a comma (",") by default. A separator between columns, can be a semicolon - ";", or any other value.</td>\n        </tr>\n    </tbody>\n</table>\n<br/>\n\n~~~js\ntreegrid.export.csv({\n    name:"treegrid_data", // data will be exported to a CSV file named "treegrid_data"\n    rowDelimiter: "\\t", // the tab delimiter will be used to separate rows\n    columnDelimiter: ";" // the semicolon delimiter will be used to separate columns\n});\n~~~\n\nhttps://snippet.dhtmlx.com/zyfois4q TreeGrid. Export\n\nThe <strong>csv()</strong> method returns a CSV string with TreeGrid data.\n\n\nRepainting TreeGrid\n------------------\n\nIn case you\'ve changed some configuration settings of a treegrid, you can repaint it on a page via the <strong>paint()</strong> method:\n\n~~~js\ntreegrid.paint();\n~~~\n\nDestructing TreeGrid\n-------------------\n\nWhen it\'s necessary to release resources occupied by TreeGrid during its activity, you can make use of the <strong>destructor()</strong> method:\n\n~~~js\ntreegrid.destructor();\n~~~\n\nUsing Selection API\n--------------------\n\nFor information on using Selection API, read [Work with Selection Object](/treegrid/usage_selection).\n\n\n\n')))}c.isMDXComponent=!0}}]);