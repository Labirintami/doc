(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{126:function(e,t,l){"use strict";l.r(t),l.d(t,"frontMatter",(function(){return a})),l.d(t,"metadata",(function(){return r})),l.d(t,"rightToc",(function(){return o})),l.d(t,"default",(function(){return u}));var n=l(2),b=l(6),c=(l(0),l(1808)),i=l(1809),a={sidebar_label:null,title:null},r={unversionedId:"tree_collection/api/treecollection_filter_method",id:"tree_collection/api/treecollection_filter_method",isDocsHomePage:!1,title:"treecollection_filter_method",description:"@short:filters controls by some criteria",source:"@site/docs/tree_collection/api/treecollection_filter_method.md",slug:"/tree_collection/api/treecollection_filter_method",permalink:"/tree_collection/api/treecollection_filter_method",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/tree_collection/api/treecollection_filter_method.md",version:"current",sidebar_label:null,sidebar:"docs",previous:{title:"exists",permalink:"/tree_collection/api/treecollection_exists_method"},next:{title:"treecollection_foreach_method",permalink:"/tree_collection/api/treecollection_foreach_method"}},o=[],s={rightToc:o};function u(e){var t=e.components,l=Object(b.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,l,{components:t,mdxType:"MDXLayout"}),Object(c.b)(i.c,{mdxType:"Short"},"filters controls by some criteria"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"rule      function,object     the filtering criteria"),Object(c.b)("li",{parentName:"ul"},"config \t\tobject\t\t optional, defines the parameters of filtering")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'treeGrid.data.filter({\n    by: "name",\n    match: "Angola"\n});\n')),Object(c.b)("p",null," api_method"),Object(c.b)(i.b,{mdxType:"Descr"},Object(c.b)("p",null,"Calling the ",Object(c.b)("strong",null,"filter()")," method without parameters reverts the component to the initial state:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"tree.data.filter();    // show all\n")),Object(c.b)("p",null,"The ",Object(c.b)("strong",null,"rule")," parameter:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"if set as a function, the filtering will be applied by the rule specified in the function:")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'tree.data.filter(function (item) {\n    return item.value.toLowerCase().indexOf("a") !== -1;\n});\n')),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"if set as an object, the parameter has the following attributes:")),Object(c.b)("table",{className:"webixdoc_links"},Object(c.b)("tbody",null,Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"by")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string"),") mandatory, the id of a column")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"match")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string"),") mandatory, a pattern to match")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"compare")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"function"),") optional, a function for extended filtering that takes three parameters:",Object(c.b)("ul",null,Object(c.b)("li",null,Object(c.b)("b",null,"value")," - the value to compare (e.g. a column in a row for Grid)"),Object(c.b)("li",null,Object(c.b)("b",null,"match")," - a pattern to match"),Object(c.b)("li",null,Object(c.b)("b",null,"item")," - a data item the values of which should be compared (e.g. a row)")))))),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'treeGrid.data.filter({\n    by: "name",\n    match: "Angola"\n});\n')),Object(c.b)("br",null),Object(c.b)("br",null),Object(c.b)("p",null,"The ",Object(c.b)("strong",null,"config")," parameter may contain the following properties:"),Object(c.b)("table",{className:"webixdoc_links"},Object(c.b)("tbody",null,Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"type")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"string"),') optional, defines the area the filtering will be applied: "all", "level", "leafs"')),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"level")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"number"),") optional, the level the filtering will be applied to")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"add")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"boolean"),") defines whether each next filtering will be applied to the already filtered data (",Object(c.b)("i",null,"true"),"), or to the initial data (",Object(c.b)("i",null,"false"),", default)")),Object(c.b)("tr",null,Object(c.b)("td",{className:"webixdoc_links0"},Object(c.b)("b",null,"smartFilter")),Object(c.b)("td",null,"(",Object(c.b)("i",null,"boolean"),") defines whether a filtering rule will be applied after adding and editing items of the collection"))))),Object(c.b)("a",{href:"https://snippet.dhtmlx.com/epsslwcd",target:"_blank"},"TreeGrid. Basic Filter"))}u.isMDXComponent=!0}}]);