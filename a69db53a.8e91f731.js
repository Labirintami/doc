(window.webpackJsonp=window.webpackJsonp||[]).push([[1131],{1190:function(e,t,l){"use strict";l.r(t),l.d(t,"frontMatter",(function(){return i})),l.d(t,"metadata",(function(){return b})),l.d(t,"rightToc",(function(){return r})),l.d(t,"default",(function(){return s}));var a=l(2),n=l(6),o=(l(0),l(1808)),c=l(1809),i={sidebar_label:"addCell",title:"addCell"},b={unversionedId:"layout/api/layout_addcell_method",id:"layout/api/layout_addcell_method",isDocsHomePage:!1,title:"addCell",description:"@short: adds a new cell into a layout",source:"@site/docs/layout/api/layout_addcell_method.md",slug:"/layout/api/layout_addcell_method",permalink:"/layout/api/layout_addcell_method",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/layout/api/layout_addcell_method.md",version:"current",sidebar_label:"addCell",sidebar:"docs",previous:{title:"Layout API overview",permalink:"/layout/api/api_overview"},next:{title:"attach",permalink:"/layout/api/layout_attach_method"}},r=[],d={rightToc:r};function s(e){var t=e.components,l=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},d,l,{components:t,mdxType:"MDXLayout"}),Object(o.b)(c.c,{mdxType:"Short"},"adds a new cell into a layout",Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"todoapi "))),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"config\tobject\t\tthe config object of a cell"),Object(o.b)("li",{parentName:"ul"},"index\t\tnumber\t\tthe position to add a cell into")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"param\tany")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'layout.addCell({\n    header:"The header of a new cell"\n});\n')),Object(o.b)("p",null," api_method"),Object(o.b)(c.b,{mdxType:"Descr"},Object(o.b)("p",null,"The full list of properties of a cell configuration object:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"id")," - (*string*) the id of a cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"html")," - (*string*) sets HTML content for a cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"hidden")," - (*boolean*) defines whether a cell is hidden"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"header")," - (*string*) the text of the header of a cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"headerIcon")," - (*string*) an icon used in the header of a cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"headerImage")," - (*string*) an image used in the header of a cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"width")," - (*string*) sets the width of a cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"height")," - (*string*) sets the height of a cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"css")," - (*string*) the name of a CSS class applied to a cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"collapsable"),"  - (*boolean*) defines whether a cell can be collapsed"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"resizable")," - (*boolean*) defines whether a cell can be resized"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"collapsed")," - (*boolean*) defines whether a cell is collapsed"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"align")," - (*string*) sets the alignment of content inside a cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"gravity")," - (*boolean*) arranges content evenly throughout the cell"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"padding")," - (*string*) defines the distance between cells"))),Object(o.b)(c.a,{mdxType:"Changelog"}))}s.isMDXComponent=!0}}]);