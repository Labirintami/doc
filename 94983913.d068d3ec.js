(window.webpackJsonp=window.webpackJsonp||[]).push([[995],{1054:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a(2),r=a(6),o=(a(0),a(1808)),l={sidebar_label:"DataDrivers",title:"DataDrivers"},i={unversionedId:"helpers/datadrivers",id:"helpers/datadrivers",isDocsHomePage:!1,title:"DataDrivers",description:"By default, the components of the DHTMLX Suite library operate data in JSON format. But, if necessary, they can also handle data in CSV or XML formats. Using API of Data Collection or Tree Collection provides an opportunity to parse, load or serialize data of a component in any of the mentioned formats.",source:"@site/docs/helpers/datadrivers.md",slug:"/helpers/datadrivers",permalink:"/helpers/datadrivers",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/helpers/datadrivers.md",version:"current",sidebar_label:"DataDrivers",sidebar:"docs",previous:{title:"removeAll",permalink:"/data_collection/api/datacollection_removeall_event"},next:{title:"load",permalink:"/data_proxy/api/dataproxy_load_method"}},c=[{value:"CSV format",id:"csv-format",children:[]},{value:"XML format",id:"xml-format",children:[]}],s={rightToc:c};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"By default, the components of the DHTMLX Suite library operate data in JSON format. But, if necessary, they can also handle data in CSV or XML formats. Using API of ",Object(o.b)("a",{parentName:"p",href:"/data_collection/api/refs/datacollection"},"Data Collection")," or ",Object(o.b)("a",{parentName:"p",href:"/tree_collection/api/refs/treecollection"},"Tree Collection")," provides an opportunity to parse, load or serialize data of a component in any of the mentioned formats. "),Object(o.b)("p",null,"However, for further work, you may need to get the same data in different formats, and, in that case, you need to convert the data between them. The best way to do this is to use the ",Object(o.b)("strong",null,"DataDrivers")," helper."),Object(o.b)("strong",null,"DataDrivers")," is a tool that helps you convert data of a component from JSON format to one of the following formats:",Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#csvformat"},"CSV format")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#xmlformat"},"XML format"))),Object(o.b)("h2",{id:"csv-format"},"CSV format"),Object(o.b)("p",null,"To create dataDrivers object, use the ",Object(o.b)("em",{parentName:"p"},"dhx.dataDrivers.csv")," constructor:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'const csvDataDriver = new dhx.dataDrivers.csv(\n    {\n        columnDelimiter: " | ",\n        rowDelimiter: "\\n\\n"\n    }\n);\n')),Object(o.b)("p",null,"The constructor has one parameter:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"optional, an object with configuration properties. These properties are:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"columnDelimiter"),' - (*string*) a comma (",") by default. A separator between columns, can be a semicolon - ";", or any other value'),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"rowDelimiter"),' - (*string*) a newline ("\\n") by default. A separator between rows, can be a tab - "\\t", or any other value.')))),Object(o.b)("p",null,"To convert data of a component (for instance, data of a chart) into a CSV string, use the ",Object(o.b)("strong",null,"serialize")," method, as in:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"csvDataDriver.serialize(chart.data.serialize(), false);\n")),Object(o.b)("p",null,"The method takes two parameters:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"data")," - (*array*) - the data to be converted"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"withoutHeader")," - (*boolean*) optional, defines whether the returned string will contain the header, *false* by default")),Object(o.b)("p",null,"As a result, the converted to ",Object(o.b)("strong",null,"CSV format")," data of the chart look like this: "),Object(o.b)("p",null,"{{snippet CSV format}}"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'"month | company A | company B | company C | company D | id\n\n`02 | 20 | 52 | 72 | 34 | 1 |\n\n`03 | 5 | 33 | 90 | 55 | 2 | \n\n`04 | 55 | 30 | 81 | 66 | 3 | \n\n`05 | 30 | 11 | 62 | 22 | 4 | "\n')),Object(o.b)("h2",{id:"xml-format"},"XML format"),Object(o.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Pro Note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"This functionality requires PRO version of the DHTMLX suite package."))),Object(o.b)("p",null,"To create dataDrivers object, use the ",Object(o.b)("em",{parentName:"p"},"dhx.dataDrivers.xml")," constructor:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"const xmlDataDriver = new dhx.dataDrivers.xml();\n")),Object(o.b)("p",null,"To convert data of a component (for example, data of a grid) into an XML string, use the ",Object(o.b)("strong",null,"serialize")," method, as in:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'xmlDataDriver.serialize(\n    [\n        {\n            country: "China", population: "1415045928", yearlyChange: "0.0039"\n        },\n        {\n            country: "India", population: "1354051854", yearlyChange: "0.0111"\n        },\n        {\n            country: "U.S.", population: "326766748", yearlyChange: "0.0071"\n        }\n    ]\n);\n')),Object(o.b)("p",null,"The method takes one parameter:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",null,"data")," - (*array*) - the data to be converted")),Object(o.b)("p",null,"As a result, the converted to ",Object(o.b)("strong",null,"XML format")," data of the grid look like this: "),Object(o.b)("p",null,"{{snippet XML format}}"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'"<?xml version="1.0" encoding="iso-8859-1"?>\n<root>\n    <item>\n        <country>China</country>\n        <population>1415045928</population>\n        <yearlyChange>0.0039</yearlyChange>\n    </item>\n    <item>\n        <country>India</country>\n        <population>1354051854</population>\n        <yearlyChange>0.0111</yearlyChange>\n    </item>\n    <item>\n        <country>U.S.</country>\n        <population>326766748</population>\n        <yearlyChange>0.0071</yearlyChange>\n    </item>\n</root>"\n')))}b.isMDXComponent=!0}}]);