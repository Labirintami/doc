(window.webpackJsonp=window.webpackJsonp||[]).push([[1110],{1169:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return i})),a.d(e,"metadata",(function(){return c})),a.d(e,"rightToc",(function(){return s})),a.d(e,"default",(function(){return p}));var n=a(2),o=a(6),r=(a(0),a(1808)),i={sidebar_label:"Step 6. Add a Chart",title:"Step 6. Add a Chart"},c={unversionedId:"tutorial/basic_application/step6",id:"tutorial/basic_application/step6",isDocsHomePage:!1,title:"Step 6. Add a Chart",description:"It's time to add a chart on the page.",source:"@site/docs/tutorial/basic_application/step6.md",slug:"/tutorial/basic_application/step6",permalink:"/tutorial/basic_application/step6",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/tutorial/basic_application/step6.md",version:"current",sidebar_label:"Step 6. Add a Chart"},s=[],l={rightToc:s};function p(t){var e=t.components,a=Object(o.a)(t,["components"]);return Object(r.b)("wrapper",Object(n.a)({},l,a,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"It's time to add a chart on the page. "),Object(r.b)("p",null,"The process of initializing a chart is similar to creating a grid or a toolbar."),Object(r.b)("div",{style:{fontWeight:"bold",color:"rgb(65, 65, 65)",paddingTop:"10px",fontSize:"15px"}},"To add a Chart on the page:"),Object(r.b)("p",null,"1","."," First, initialize the chart with the dhx.Chart object constructor in the following way:  "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var chart = new dhx.Chart(null, { \n    type: "pie", //the type of the chart is pie\n    series: [ \n        //an array of series objects\n        {\n            paddings: 170, // paddings between the chart and layout borders\n            useLines: true, // shows lines between chart sectors and labels\n            subType: "percentOnly", // puts % on the chart\n            // for data communication: \n            // a chart value takes the value from a dataset (see step 7)\n            value: "value",             \n            color: "color",\n            // sets templates "Premium"/"Default Users" \n            // for labels of data items rendered on a scale \n            text: "text", \n            stroke: "#FFFFFF",\n            strokeWidth: 2,\n            tooltip: true, //shows values of data items in tooltips\n            // the template function takes the "point" array as an argument \n            tooltipTemplate: function(point) {          \n                //The array elements are value and text\n                return point[0] + (point[0] > 1 ? " Users" : " User");\n            }\n        }\n    ]\n});\n')),Object(r.b)("p",null,"2",".",' Then attach the chart to the "chart-cell" of Layout as in:'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'// attaching the chart to the "chart-cell" of the layout\nlayout.cell("chart-cell").attach(chart);\n')),Object(r.b)("p",null,"You can learn more about chart configuration options in the ",Object(r.b)("a",{parentName:"p",href:"/chart/configuration_properties"},"Configuration")," article."),Object(r.b)("div",{id:"tutorial_step"},Object(r.b)("a",{id:"next_step",href:"tutorial/basic_application/step7.md"})))}p.isMDXComponent=!0}}]);