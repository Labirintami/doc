(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{101:function(t,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return r})),o.d(n,"metadata",(function(){return s})),o.d(n,"rightToc",(function(){return u})),o.d(n,"default",(function(){return d}));var e=o(2),a=o(6),i=(o(0),o(1808)),r={sidebar_label:"imageButtonText Control",title:"imageButtonText Control"},s={unversionedId:"toolbar/image_button_text",id:"toolbar/image_button_text",isDocsHomePage:!1,title:"imageButtonText Control",description:"`tododelete \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f?`",source:"@site/docs/toolbar/image_button_text.md",slug:"/toolbar/image_button_text",permalink:"/toolbar/image_button_text",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/toolbar/image_button_text.md",version:"current",sidebar_label:"imageButtonText Control"},u=[],l={rightToc:u};function d(t){var n=t.components,o=Object(a.a)(t,["components"]);return Object(i.b)("wrapper",Object(e.a)({},l,o,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"tododelete \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f?")," "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'\nA button with an image and a text label. Like toolbar/button.md, it can be TwoState and have a badge with a number.\n\n![DHX imageButtonText](../assets/toolbar/image_button_text.png)\n\n## Adding imageButtonText Controls\n\nYou can add the imageButtonText control with the [add()]() method of TreeCollection:\n\n~~~js\nmyToolbar.data.add({\n    type: "imageButtonText",\n    value: "User",\n    count: 10,\n    src: "../img/avatar.png"\n})\n~~~\n\nYou can provide the following <strong>attributes</strong> in the configuration object of imageButtonText:\n\n- <strong>id</strong> - (string | number, optional) the ID of the button;\n- <strong>type</strong> - (string) always "imageButton";\n- <strong>value</strong> - (string, optional) a text label;\n- <strong>src</strong> - (string) the path to the image;\n- <strong>count</strong> - (number | string) adds a badge with a number or any symbol (badge is round and doesn\'t expand);\n- <strong>size</strong> - (string) "big", "small" by default;\n- <strong>tooltip</strong> - (string, optional) adds a tooltip to a button;\n- <strong>twoState</strong> - (boolean) defines whether the button has two states (active/inactive);\n- <strong>active</strong> - (boolean) for two-state buttons, if true, the button is in the active state;\n- <strong>css</strong> (string) - optional, adds a custom CSS class.\n\n## Working with ImageButtonText\n\nJust like toolbar/button.md, iconButton can be hidden, disabled and can have a tooltip. You can also manipulate the states of a twoState imageButtonText.\n\n\nshall I repeate the text from Button about hide, disable, tooltip and twoState, or a simple link (as it is now) will do?\nthe button itself doesn\'t look good yet(( (check out the screenshot)\n\n')))}d.isMDXComponent=!0}}]);