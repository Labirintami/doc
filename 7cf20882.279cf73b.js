(window.webpackJsonp=window.webpackJsonp||[]).push([[848],{907:function(n,t,e){"use strict";e.r(t),e.d(t,"frontMatter",(function(){return r})),e.d(t,"metadata",(function(){return s})),e.d(t,"rightToc",(function(){return d})),e.d(t,"default",(function(){return p}));var i=e(2),o=e(6),a=(e(0),e(1808)),r={sidebar_label:"Input",title:"Input"},s={unversionedId:"sidebar/input",id:"sidebar/input",isDocsHomePage:!1,title:"Input",description:"`tododelete \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f?`",source:"@site/docs/sidebar/input.md",slug:"/sidebar/input",permalink:"/sidebar/input",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/sidebar/input.md",version:"current",sidebar_label:"Input"},d=[],l={rightToc:d};function p(n){var t=n.components,e=Object(o.a)(n,["components"]);return Object(a.b)("wrapper",Object(i.a)({},l,e,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"tododelete \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f?")," "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'\nThis is an input field for entering some text. \n\n\n\n## Adding Input\n\nThe following example shows how an Input control can be easily added to a sidebar with the help of the <strong>add()</strong> method of Tree Collection:\n\n~~~js\nsidebar.data.add({\n    type:"input",\n    value:"",\n    placeholder:"Type to search"\n});\n~~~\n\n\n### Attributes\n\nYou can provide the following <strong>attributes</strong> in the configuration object of an input field:\n\n- <strong>type</strong> - (*string*) required, the type of a control, set it to "input". If not specified - the ["navItem"](/sidebar/navitem) type is applied by default.\n- <strong>id</strong> - (*string*) the id of a control, auto-generated if not set\n- <strong>icon</strong> - (*string*) optional, the name of an [icon](/sidebar/customization#icons) from the used icon font\n- <strong>placeholder</strong> - (*string*) optional, a tip for the input \n- <strong>width</strong> - (*number*) optional, the width of the input field\n- <strong>label</strong> - (*string*) optional, a text label for the Input control\n- <strong>value</strong> - (*string*) optional, the initial value of the field\n- <strong>tooltip</strong> - (*string*) a tooltip for an input\n- <strong>inputType</strong> - (*string*) sets the type of an input, use the "password" value to specify a field for entering a password\n\n\n## Showing/hiding input \n\nYou can show or hide Input with the methods of Sidebar:\n\n~~~js\nsidebar.show(id);\nsidebar.hide(id);\n~~~\n\n## Enabling/disabling input\n\nYou can also disable and enable inputs:\n\n~~~js\nsidebar.enable(id);\nsidebar.disable(id);\n~~~\n\n## Setting tooltip\n\nYou can create a tooltip for an input:\n\n~~~js\n{\n    type: "input",\n    value: "",\n    tooltip:"Type to search"\n}\n~~~\n\n\n## Setting/getting value\n\nYou can use the <strong>setState()</strong> and <strong>getState()</strong> methods of Sidebar to change and access the value of Input.\n\nTo fill in Input with some text, call <strong>setState()</strong> with a key-value pair as a parameter, where the key is the ID of the input and the value is the text:\n\n~~~js\n{\n    type: "input",\n    id:"search",\n    value: ""\n}\n...\nsidebar.setState({search:"Summer"});\n~~~\n\nTo get the text that is currently inside the Input control, call <strong>getState()</strong>:\n\n~~~js\nsidebar.getState(); //-> {search:"Summer"}\n~~~\n\n<br/>\n\nCheck the full list of available operations in the [Sidebar API](/sidebar/api/refs/sidebar) and [Tree Collection API](/tree_collection/api/refs/treecollection).\n\n\nadd image, add link to sample<br/>\n\n')))}p.isMDXComponent=!0}}]);