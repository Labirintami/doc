(window.webpackJsonp=window.webpackJsonp||[]).push([[541],{600:function(n,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return r})),a.d(e,"metadata",(function(){return s})),a.d(e,"rightToc",(function(){return c})),a.d(e,"default",(function(){return h}));var t=a(2),o=a(6),l=(a(0),a(1808)),r={sidebar_label:"Layout API",title:"Layout API"},s={unversionedId:"layout/api",id:"layout/api",isDocsHomePage:!1,title:"Layout API",description:"`tododelete`",source:"@site/docs/layout/api.md",slug:"/layout/api",permalink:"/layout/api",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/layout/api.md",version:"current",sidebar_label:"Layout API"},c=[],d={rightToc:c};function h(n){var e=n.components,a=Object(o.a)(n,["components"]);return Object(l.b)("wrapper",Object(t.a)({},d,a,{components:e,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"tododelete")," "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'\nConstructor\n----------------\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n        {\n            header: "Column 1"\n        },\n        {\n            header: "Column 2",\n            cols: [\n                {\n                    header:"Left cols"\n                },\n                {\n                    header:"Center cols",\n                    cols: [\n                        { header: "Sub Block Header cols 1" },\n                        { header: "Sub Block Header cols 2" },\n                        { header: "Sub Block Header cols 3" }\n                    ]\n                }                           \n            ]\n        }\n    ]\n});\n~~~\n\nParameters:\n\n- the HTML container of dhtmlxLayout\n- configuration settings (check below)\n\nMethods (Layout)\n-----------\n\n### addCell\n\n- short: adds a new cell into a layout\n- params:\n    - config    object      the config object of a cell\n    - index     number      the position to add a cell into\n- example:\n\n~~~js\nlayout.addCell({\n    header:"The header of a new cell"\n});\n~~~\n\n:::note\nAdd cell attributes here or the link to the list\n:::\n\n### cell\n\n- short: returns the config object of a cell\n- params:\n    - id    string      the id of a cell\n- example:\n\n~~~js\nlayout.cell(id);\n~~~\n\n### removeCell\n\n- short: removes a specified cell\n- params:\n    - id    string      the id of a cell\n- example:\n\n~~~js\nlayout.removeCell(id);\n~~~\n\n\nMethods (Cell)\n---------------\n\n### attach\n\n- short: should attach any dhx component into a Layout cell?\n- params:\n    - name          string?         the name of a component\n    - config        object          the config object of the attached component\n- example:\n\n~~~js\nlayout.cell(id).attach(name,config);\n~~~\n\n\n### isVisible\n\n- short: checks whether a cell is visible\n- returns:\n    - result    boolean     true, if the cell is visible\n- example:\n\n~~~js\nlayout.cell("1").isVisible(); // -> true|false\n~~~\n\n\n### getParent\n\n- short: returns the parent of a cell\n- returns:\n    - config    object      the config object of the parent of a cell\n- example:\n\n~~~js\nlayout.cell("1").getParent();\n~~~\n    \n### show\n\n- short: shows a hidden cell\n- params:\n    - id    string      the id of a cell\n- example:\n\n~~~js\nlayout.cell("1").show();\n~~~\n    \n### hide\n\n- short: hides a specified cell\n- params:\n    - id    string      the id of a cell\n- example:\n\n~~~js\nlayout.cell("1").hide();\n~~~\n\nProperties (Cell)\n----------------\n\n### id\n\n- short: the id of a cell\n- type:string\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n        cols: [\n            { header: "Cell header", id:"1"}\n        ]\n    }\n);\n~~~\n\n### html\n\n- short: sets HTML content for a cell\n- type:string \n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", html: "Hello world"}\n    ]\n});\n~~~\n\n### hidden \n\n- short: defines whether a cell is hidden\n- type:boolean \n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", hidden:true}\n    ]\n});\n~~~\n\n\n### header\n\n- short: adds a header with text for a cell\n- type:string\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header"}\n    ]\n});\n~~~\n\n### headerIcon \n\n- short: an icon used in the header of a cell\n- type:string\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header:"Cell header", headerIcon:"/icon.png"}\n    ]\n});\n~~~\n\n\n### headerImage \n\n- short: an image used in the header of a cell\n- type:string\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", headerImage:"/img.png"}\n    ]\n});\n~~~\n\n\n### width\n\n- short: sets the width of a cell\n- type:string\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", width:"300px"}\n    ]\n});\n~~~\n\n### height\n\n- short: sets the height of a cell\n- type:string\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", height:"300px"}\n    ]\n});\n~~~\n\n\n### css \n\n- short: the name of a CSS class applied to a cell\n- type:string\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", css:"meClass"}\n    ]\n});\n~~~\n\n\n### collapsable \n\n- short: defines whether a cell can be collapsed \n- type:boolean\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", collapsable:true}\n    ]\n});\n~~~\n\n\n### resizable \n\n- short: defines whether a cell can be resized\n- type:boolean\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", resizable:true}\n    ]\n});\n~~~\n\n### collapsed\n\n- short: defines whether a cell is collapsed \n- type:boolean\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", collapsed:true}\n    ]\n});\n~~~\n\n\n### isAccordion \n\n- short: defines whether a layout (cell) works as an accordion\n- type:boolean\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    cols: [\n      { header: "Cell header", isAccordion:true}\n    ]\n});\n~~~\n\n\nProperties (Layout)\n-------------------\n\n### rows \n\n- short: an array of rows objects\n- type:array\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    header: "Main Block Header",\n    rows: [\n        {\n            cols: [\n                {\n                    header: "Block 1",\n                    width: "40%"                                \n                },\n                {\n                    header: "Block 2",                  \n                    width: "60%"\n                }\n            ]\n        },\n        {\n            rows: [\n                {\n                    header: "Block 3",\n                    height: "200px"                             \n                },\n                {\n                    header: "Block 4",                              \n                    height: "300px"\n                }\n            ]\n        }\n    ]\n});\n~~~\n\n\n### cols \n\n- short: an array of columns objects\n- type:array\n- example:\n\n~~~js\nvar layout = new dhx.Layout("layout_container", {\n    header: "Main Block Header",\n    cols: [\n        {\n            header: "Sub Block Header row"\n        },\n        {\n            header: "Sub Block Header row",\n            cols: [\n                {\n                    header:"Left cols"\n                },\n                {\n                    header:"Center cols",\n                    cols: [\n                        { header: "Sub Block Header cols 1" },\n                        { header: "Sub Block Header cols 2" },\n                        { header: "Sub Block Header cols 3" }\n                    ]\n                },\n                            \n            ]\n        }\n    ]\n});\n~~~\n\n### views \n\n- short: sets an array of views objects \n- type: array\n- example:\n\n~~~js\nvar tabbar = new dhx.Tabbar("tabbar_container",{\n    views:[\n        { tab: "left", css:"panel flex"},\n        { tab: "west", css:"panel flex"},\n        { tab: "east", css:"panel flex"},\n        { tab: "right", css:"panel flex"}\n    ]\n});\n~~~\n\n### activeView  \n\n- short: sets the currently active view\n- type:string\n- example:\n\n~~~js\nvar tabbar = new dhx.Tabbar("tabbar", {activeView:"3",\n    mode: "top",\n    views:[\n        { id:"1", tab: "leftside", css:"panel flex", header:"Left"},\n        { id:"2", tab: "west", css:"panel flex", header:"West"},\n        { id:"3", tab: "east", css:"panel flex", header:"East"},\n        { id:"4", tab: "right", css:"panel flex", header:"Right" }\n    ]\n});\n~~~\n\n\n\n- check and improve<br/>\n- should configs of a cell be duplicated for layout?<br/>\n- "full" cell config?<br/>\n- isAccordion?<br/>\n- attach()?<br/>\n\n')))}h.isMDXComponent=!0}}]);