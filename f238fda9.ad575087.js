(window.webpackJsonp=window.webpackJsonp||[]).push([[1648],{1707:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return o}));var a=n(2),l=n(6),r=(n(0),n(1808)),s={sidebar_label:"Chart API",title:"Chart API"},i={unversionedId:"chart/api",id:"chart/api",isDocsHomePage:!1,title:"Chart API",description:"`tododelete`",source:"@site/docs/chart/api.md",slug:"/chart/api",permalink:"/chart/api",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/chart/api.md",version:"current",sidebar_label:"Chart API"},c=[{value:"Constructor",id:"constructor",children:[]},{value:"Objects",id:"objects",children:[]},{value:"Methods",id:"methods",children:[{value:"eachSeries",id:"eachseries",children:[]},{value:"configure",id:"configure",children:[]},{value:"paint",id:"paint",children:[]},{value:"getSeries",id:"getseries",children:[]},{value:"destructor",id:"destructor",children:[]}]},{value:"Properties",id:"properties",children:[{value:"type",id:"type",children:[]},{value:"Available types of charts",id:"available-types-of-charts",children:[]},{value:"animate",id:"animate",children:[]},{value:"scales",id:"scales",children:[]},{value:"series",id:"series",children:[]},{value:"legend",id:"legend",children:[]},{value:"maxPoints",id:"maxpoints",children:[]},{value:"data",id:"data",children:[]}]},{value:"Events",id:"events",children:[{value:"toggleSeries",id:"toggleseries",children:[]},{value:"resize",id:"resize",children:[]}]}],b={rightToc:c};function o(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"tododelete")," "),Object(r.b)("h2",{id:"constructor"},"Constructor"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var chart = new dhx.Chart("chart_container",{\n    type:"line" \n});\n')),Object(r.b)("p",null,"Parameters:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"the HTML container of dhtmlxChart"),Object(r.b)("li",{parentName:"ul"},"an object with configuration settings (check below)")),Object(r.b)("h2",{id:"objects"},"Objects"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"config"),Object(r.b)("li",{parentName:"ul"},"data"),Object(r.b)("li",{parentName:"ul"},"events")),Object(r.b)("h2",{id:"methods"},"Methods"),Object(r.b)("h3",{id:"eachseries"},"eachSeries"),Object(r.b)("p",null,"iterates over Chart series"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"parameter:")),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"function"),") a handler function that takes an array with series objects as a parameter "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var chart = new dhx.Chart("chart", {\n    type: "radar",\n    scales: {\n        radial:{\n            value: "month",\n            maxTicks: 7\n        }\n    },\n    series: [\n        {\n            id: "A",\n            value: "company A",\n            fill: "#000000",\n            alpha: 0.3,\n            color: "#000000"\n        },\n        {\n            id: "B",\n            value: "company B",\n            fill: "#FFFF33",\n            alpha: 0.3,\n            color: "#FFFF33"\n        }\n    ]\n});\n\nchart.eachSeries(function(series){\n    // some code here\n});\n')),Object(r.b)("h3",{id:"configure"},"configure"),Object(r.b)("p",null,"sets configuration for a chart"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"parameter:")),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"object"),") an object with ","[chart configuration]","(link to config properties)"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'chart.configure({\n    type: "radar",\n    scales: {\n        radial:{\n            value: "month",\n            maxTicks: 7\n        }\n    },\n    series: [\n        {\n            id: "A",\n            value: "company A",\n            fill: "#000000",\n            alpha: 0.3,\n            color: "#000000"\n        },\n        {\n            id: "B",\n            value: "company B",\n            fill: "#FFFF33",\n            alpha: 0.3,\n            color: "#FFFF33"\n        }\n    ]\n});\n')),Object(r.b)("h3",{id:"paint"},"paint"),Object(r.b)("p",null,"repaints a chart on a page"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"chart.paint();\n")),Object(r.b)("h3",{id:"getseries"},"getSeries"),Object(r.b)("p",null,"returns an object with configuration of a specified series"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"parameter:")),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"string"),") the id of a series"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"returns:")),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"object"),") an object with configuration of a series"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'chart.getSeries("A");\n/* => \n{\n    active: true, alpha: 0.3, color: "#000000", fill: "#000000",\n    id: "A", paddings: 20, pointType: "circle", strokeWidth: 2, \n    tooltip: true, type: "radar", value: "company A"\n}\n*/\n')),Object(r.b)("h3",{id:"destructor"},"destructor"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"short: releases occupied resources"),Object(r.b)("li",{parentName:"ul"},"example:")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"chart.destructor();\n")),Object(r.b)("h2",{id:"properties"},"Properties"),Object(r.b)("h3",{id:"type"},"type"),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"string"),") ",Object(r.b)("strong",null,"mandatory"),", specifies the type of a chart"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var chart = new dhx.Chart("chart_container",{\n    type:"line" \n});\n')),Object(r.b)("h3",{id:"available-types-of-charts"},"Available types of charts"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'"bar",'),Object(r.b)("li",{parentName:"ul"},'"line",'),Object(r.b)("li",{parentName:"ul"},'"spline",'),Object(r.b)("li",{parentName:"ul"},'"scatter",'),Object(r.b)("li",{parentName:"ul"},'"area",'),Object(r.b)("li",{parentName:"ul"},'"donut",'),Object(r.b)("li",{parentName:"ul"},'"pie",'),Object(r.b)("li",{parentName:"ul"},'"pie3D",'),Object(r.b)("li",{parentName:"ul"},'"radar",'),Object(r.b)("li",{parentName:"ul"},'"x-bar",'),Object(r.b)("li",{parentName:"ul"},'"bars",'),Object(r.b)("li",{parentName:"ul"},'"splineArea"')),Object(r.b)("h3",{id:"animate"},"animate"),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"boolean"),") enables/disables animation of series switching, while changing the displayed data, ",Object(r.b)("em",{parentName:"p"},"false")," by default"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var chart = new dhx.Chart("chart_container",{\n    type:"bar",\n    animate: false \n});\n')),Object(r.b)("h3",{id:"scales"},"scales"),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"object"),") defines configuration of chart scales"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var chart = new dhx.Chart("chart_container",{\n    type:"area",\n    scales: {\n        "bottom" : {\n            text: \'month\'\n        },\n        "left" : {\n            padding: 10,\n            max: 90\n        }\n    },\n    series: [\n        {\n           value: \'company A\',\n           strokeWidth: 2\n           // more options   \n        }\n    ]\n});\n')),Object(r.b)("p",null,"####The list of config options for scales"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"type"),' - (*string*) the type of a scale: "left","right","top","bottom","radial"'),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"title")," - (*string*) sets a title for a scale"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"text")," - (*string*) sets a template for labels of data items rendered on a scale"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"locator")," - (*string*) points to the data property, the values of which should be rendered in the chart (used for Scatter chart)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"textTemplate")," - (*function*) sets a template for scale labels"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"textPadding")," - (*number*) distance between labels of data items and the scale"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"showText")," - (*boolean*) shows/hides labels of data items on the scale"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"scalePadding")," - (*number*) distance between the scale and its title"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"hidden")," - (*boolean*) hides/shows the whole scale"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"grid")," - (*boolean*) shows/hides the grid lines (for x,y, or both scales). *true* by default for both scales (scales lines are shown). To hide both scales lines, you need to set *grid:false* in the configs of each scale"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"dashed")," - (*boolean*) sets the dashed type for a scale. Use the *dashed:true* option in the configuration of the scale"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"specificLevel")," - (*number*) shows a threshold line (a target value); looks for the specified value in the data"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"specificNumber"),"  - (*number*) allows setting a threshold line at any defined level (any number, not necessarily from the data)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"max")," - (*number*) the maximal value of the Y scale"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"min")," - (*number*) the minimal value of the Y scale"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"log")," - (*boolean*) sets the Y scale as logarithmic"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"padding")," - (*number*) the padding between the values of the Y scale (area)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"maxTicks")," - (*number*) sets the maximal number of ticks on the Y scale")),Object(r.b)("p",null,"The ",Object(r.b)("strong",null,"radial")," scale has its own properties, due to peculiarities of configuration:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"radial")," scale - ",Object(r.b)("strong",null,"value")," - (*string*) the name of the dataset property to take data values from (map to) - ",Object(r.b)("strong",null,"zebra")," - (*boolean*) sets a striped scale coloring for the Radar chart (alternation of two colors in a step) - ",Object(r.b)("strong",null,"showAxis")," - (*boolean*) renders values of the scale")),Object(r.b)("h3",{id:"series"},"series"),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"array"),") defines configuration of chart series"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var chart = new dhx.Chart("chart_container",{\n    type:"bar",\n    scales: {\n        "bottom" : {\n            text: "month"\n        },\n        "left" : {}\n    },\n    series: [\n        {\n            id: "A",\n            value: "company A",\n            fill: "#394E79",\n            stacked: stacked,\n            color: "none"\n        },\n        {\n            id: "B",\n            value:"company B",\n            fill: "#5E83BA",\n            stacked: stacked,\n            color: "none"\n        }\n    ]\n});\n')),Object(r.b)("p",null,"####The list of config options for series (for charts with scales)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"id")," - (*string*) the id of a series"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"type")," - (*string*) the type of a chart"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"active")," - (*boolean*) defines, whether a series is active/inactive"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"bulletColor")," - (*string*) the color of data item points (bullets) in a series"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"dashed")," - (*boolean*) sets the dashed type for a series line"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"strokeWidth")," - (*number*) the width of the chart outline"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"value")," - (*string*) the name of the data set property to map data values to"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"pointType"),' - (*string*) sets the type of the point of the data item. There are the following point types:"circle","rect","triangle","rhombus","simpleRect","simpleCircle","empty"'),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"barWidth")," - (*number*) sets the width of bars in the Bar chart"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"css")," - (*string*) adds a style class for a series"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"fill")," - (*string*) the color of the series filling (Area, Bar, Radar) in Hex format"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"color")," - (*string*) the color of the series outline"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"alpha")," - (*number*) transparency of the series filling  (Area, Bar, Radar)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"gradient")," - (*function*) a function that defines the logic of applying gradient to the series filling  (Area, Bar, Radar)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"tooltip")," - (*boolean*) shows values of data items in tooltips, *true* by default"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"tooltipTemplate")," - (*function*) a function that defines a template for showing values of data items in tooltip"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"baseLine")," - (*number*) sets a base line for rendering data items (bars in Bar chart)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"stacked")," - (*boolean*) defines whether a stacked chart will be rendered (Bar)")),Object(r.b)("h4",{id:"the-list-of-config-options-for-series-for-charts-without-scales-pie-pie3d-donut"},"The list of config options for series (for charts without scales: Pie, Pie3D, Donut)"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"text")," - (*string*) the name of the data set property to map labels of data values to"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"value")," - (*string*) the name of the data set property to map data values to"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"useLines"),' - (*boolean*) shows/hides lines used to "connect" chart sectors with labels'),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"showText")," - (*boolean*) shows/hides values of data items on the chart (Pie, Pie3D)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"subType"),' - (*string*) specifies the subtype for Donut chart: "basic"|"percentOnly"|"valueOnly"'),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"color")," - (*string*) the color of chart outline (Pie, Pie3D)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"monochrome"),' - (*string*) colors chart sections in shades of a color specified as a value of this property (e.g. "blue")'),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"paddings")," - (*number*) paddings between a chart and its initial position")),Object(r.b)("h3",{id:"legend"},"legend"),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"object"),") defines the configuration of a chart legend"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var chart = new dhx.Chart("chart_container",{\n    scales: {\n        // scales config\n    },\n    series: [\n        // list of series \n    ],\n    legend: {\n        series: ["A", "B", "C"],\n        valign: "top",\n        halign: "right"\n    }    \n});\n')),Object(r.b)("p",null,"####The list of config options for legend"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"values")," - (*object*) maps attributes of legend items to data set properties. Contains the following properties: - ",Object(r.b)("strong",null,"id")," - (*string,number*) the id of the series that will be bound to the legend - ",Object(r.b)("strong",null,"text")," - (*string*) the pointer to the data value to take a text for the legend from - ",Object(r.b)("strong",null,"color")," - (*string*) the pointer to the data value to take a color for the legend from - ",Object(r.b)("strong",null,"alpha")," - (*number*) transparency of a legend item"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"form"),' - (*string*) the form of the legend markers ("rect" or "circle")'),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"itemPadding")," - (*number*) padding between legend items"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"halign"),' -  (*string*) the horizontal alignment of the legend block: "left"|"right"|"center"'),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"valign"),' - (*string*) the vertical alignment of the block: "top"|"bottom"|"middle"'),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"series")," - (*array*) the list of series that should be shown in the legend"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",null,"margin")," - (*number*) margin between the scale and the legend")),Object(r.b)("h3",{id:"maxpoints"},"maxPoints"),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"number"),") displays an average number of values in case a data set is too large to show all the values in the chart"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var data = [];\nvar k = 0;\nfor (var i=0; i<100000; i++) {\n    data.push({\n        value: "value" + i,\n        value: Math.floor(Math.random() * 10000+k)\n    })\n    k = (k + 0.02) % 5000;\n}\nvar config = {\n    type:"line",\n    maxPoints:100,\n    scales: {\n        bottom: {\n            text: "value",\n            maxTicks: 10,\n            showText: false\n        },\n        left: {}\n    },\n    series: [\n        {\n            value: "value",\n            color: "#49A6D9",\n            strokeWidth: 2,\n            tooltip: true,\n            pointType: "empty"\n        }\n    ]\n}\n\nvar chart = new dhx.Chart("chart", config);\nchart.data.parse(data);\n')),Object(r.b)("h3",{id:"data"},"data"),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"array"),") specifies an array of data objects to set into the chart"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'var dataset = [\n    { month:"`02", "company A":20, "company B":52, "company C":72, "company D":34},\n    { month:"`03", "company A":5, "company B":33, "company C":90, "company D":55},\n    { month:"`04", "company A":55, "company B":30, "company C":81, "company D":66},\n    // more objects\n];\n\nvar chart = new dhx.Chart("chart_container",{\n    type:"bar",\n    scales: {\n        "bottom" : {\n            text: "month"\n        },\n        "left" : {}\n    },\n    series: [\n        {\n            id: "A",\n            value: "company A",\n            fill: "#394E79",\n            stacked: stacked,\n            color: "none"\n        },\n        {\n            id: "B",\n            value:"company B",\n            fill: "#5E83BA",\n            stacked: stacked,\n            color: "none"\n        }\n    ],\n    data:dataset\n});\n')),Object(r.b)("h2",{id:"events"},"Events"),Object(r.b)("h3",{id:"toggleseries"},"toggleSeries"),Object(r.b)("p",null,"fires on toggle on/off a series in a legend"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"handler parameters:")),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"string"),") the id of a toggled series "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'chart.events.on("ToggleSeries", function(id){\n    console.log("The "+id+" series is toggled");\n});\n')),Object(r.b)("h3",{id:"resize"},"resize"),Object(r.b)("p",null,"fires on changing the size of the chart container"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"handler parameters:")),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"object"),") an object with new chart size"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'chart.events.on("Resize", function({width:500, height:500}){\n    console.log("The size of the chart has changed");\n});\n')),Object(r.b)("p",null,"check lists, namings, descriptions and examples",Object(r.b)("br",null)))}o.isMDXComponent=!0}}]);