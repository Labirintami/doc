(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{254:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return a})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return l}));var o=t(2),s=t(6),r=(t(0),t(1808)),i={sidebar_label:"Tree API",title:"Tree API"},a={unversionedId:"tree/api",id:"tree/api",isDocsHomePage:!1,title:"Tree API",description:"`tododelete \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f?`",source:"@site/docs/tree/api.md",slug:"/tree/api",permalink:"/tree/api",editUrl:"https://github.com/Labirintami/doc/edit/master/docs/tree/api.md",version:"current",sidebar_label:"Tree API"},d=[],c={rightToc:d};function l(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"tododelete \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f?")," "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'\nConstructor\n---------------\n\n~~~js\nvar tree = new dhx.Tree("tree_container",{\n    // config options\n});\n~~~\n\nParameters:\n\n- the HTML container of dhtmlxTree\n- configuration settings (check below)\n\nMethods\n-------------\n\n### paint\n\n- short: repaints Tree on a page\n- example:\n\n~~~js\ntree.paint();\n~~~\n\n### editItem\n    \n- short: edits a Tree item\n- params:\n    - id        string      the id of an item\n    - config    object      the config object of an editor\n        - item          any         the item\n        - mode          string      the mode of editor\n        - options       array       an array of additional options\n- example:\n\n~~~js\ntree.editItem(id, {\n    item: item,\n    mode: "text"|"select",\n    options: []\n});\n~~~\n\n:::note\nImprove descr of editItem\n:::\n    \n### getState\n\n- short: gets the state of a tree\n- returns: \n    - state     object      an object of *key:value* pairs, where *key* is the id of a tree item and *value* is its state \n- example:\n\n~~~js\ntree.getState();\n/* -> \n{\n    books: {open: true, selected: 2}, \n    mystery: {open: true, selected: 1}, \n    fantasy: {open: undefined, selected: 0}\n}\n*/\n~~~\n\n- descr:\nEach state object of an item includes two properties:\n - open         boolean     defines whether the tree item is open\n - selected     number ?    defines whether the tree item is selected\n\n:::note\nImprove descr of the returned object\n:::\n\n\n### setState\n\n- short: sets the state of a tree\n- params:\n    - state     object      an object of *key:value* pairs, where *key* is the id of a tree item and *value* is its state\n- example:\n\n~~~js\ntree.setState(state);\n~~~\n- descr:\nEach state object of an item includes two properties:\n - open         boolean     defines whether the tree item is open\n - selected     number ?    defines whether the tree item is selected\n\n:::note\nAdd state example, improve descr of the state object\n:::\n\n\n### close\n\n- short: closes a tree item by id\n- params: \n    - id    string      the id of an item to close\n- example:\n\n~~~js\ntree.close("history");\n~~~\n\n### closeAll\n\n- short: closes all opened tree items\n- example:\n\n~~~js\ntree.closeAll();\n~~~\n\n\n### open\n\n- short: opens a tree item by id\n- params: \n    - id    string      the id of an item to open\n- example:\n\n~~~js\ntree.open("history");\n~~~\n\n### openAll\n\n- short: opens all closed tree items\n- example:\n\n~~~js\ntree.openAll();\n~~~\n\n\n### toggle\n\n- short: opens/closes a tree item by id\n- example:\n\n~~~js\ntree.toggle("history");\n~~~\n\n### getChecked\n\n- short: gets all checked tree items\n- returns:\n    - checked   array       an array of ids of checked items\n- example:\n\n~~~js\ntree.getChecked(); // -> ["jmf", "rle", "sk", "km", "af", "jw"]\n~~~\n\n### checkItem\n\n- short: checks a tree item and all its sub-items\n- params:\n     - id   string      the id of an item to check\n- example:\n\n~~~js\ntree.checkItem("history");\n~~~\n\n### unCheckItem\n\n- short: unchecks a tree item and all its sub-items\n- params:\n     - id   string      the id of an item to uncheck\n- example:\n\n~~~js\ntree.unCheckItem("history");\n~~~\n\n### disableCheckbox\n\n- short: disables the checkbox of a tree item and all its sub-items\n- params:\n     - id   string      the id of an item with checkbox\n- example:\n\n~~~js\ntree.disableCheckbox("history");\n~~~\n\n### enableCheckbox\n\n- short: enables a disabled tree item and all its sub-items\n- params:\n     - id   string      the id of an item with checkbox\n- example:\n\n~~~js\ntree.enableCheckbox("history");\n~~~\n\n### refreshItems\n\n- short: refreshes a tree item ?\n- params:\n     - id   string      the id of an item \n- example:\n\n~~~js\ntree.refreshItems(id);\n~~~\n\n:::note\nCheck the name and functionality of the method\n:::\n\n\n\nProperties\n--------------\n\n- data?: TreeCollection<any>;\n- dragMode?: DragMode;\n- dragBehaviour?: DragBehaviour;\n- keyNavigation?: boolean;\n- autoload?: string;\n- checkbox?: boolean;\n- isFolder?: (obj: any) => boolean;\n- dragCopy?: boolean;\n\n\nEvents\n------------\n\n- itemClick = "itemclick",\n- itemDblClick = "itemdblclick",\n- itemContextMenu = "itemcontextmenu"\n\n\n{{todo don\'t delete}}\n\n')))}l.isMDXComponent=!0}}]);